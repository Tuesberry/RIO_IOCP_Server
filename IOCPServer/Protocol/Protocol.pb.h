// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C2S_CHAT;
struct C2S_CHATDefaultTypeInternal;
extern C2S_CHATDefaultTypeInternal _C2S_CHAT_default_instance_;
class C2S_LOGIN;
struct C2S_LOGINDefaultTypeInternal;
extern C2S_LOGINDefaultTypeInternal _C2S_LOGIN_default_instance_;
class C2S_LOGIN_ADMIN;
struct C2S_LOGIN_ADMINDefaultTypeInternal;
extern C2S_LOGIN_ADMINDefaultTypeInternal _C2S_LOGIN_ADMIN_default_instance_;
class C2S_LOGOUT;
struct C2S_LOGOUTDefaultTypeInternal;
extern C2S_LOGOUTDefaultTypeInternal _C2S_LOGOUT_default_instance_;
class C2S_MOVE;
struct C2S_MOVEDefaultTypeInternal;
extern C2S_MOVEDefaultTypeInternal _C2S_MOVE_default_instance_;
class PLAYER_POS_INFO;
struct PLAYER_POS_INFODefaultTypeInternal;
extern PLAYER_POS_INFODefaultTypeInternal _PLAYER_POS_INFO_default_instance_;
class S2C_CHAT;
struct S2C_CHATDefaultTypeInternal;
extern S2C_CHATDefaultTypeInternal _S2C_CHAT_default_instance_;
class S2C_ENTER;
struct S2C_ENTERDefaultTypeInternal;
extern S2C_ENTERDefaultTypeInternal _S2C_ENTER_default_instance_;
class S2C_LEAVE;
struct S2C_LEAVEDefaultTypeInternal;
extern S2C_LEAVEDefaultTypeInternal _S2C_LEAVE_default_instance_;
class S2C_LOGIN_ADMIN_RESULT;
struct S2C_LOGIN_ADMIN_RESULTDefaultTypeInternal;
extern S2C_LOGIN_ADMIN_RESULTDefaultTypeInternal _S2C_LOGIN_ADMIN_RESULT_default_instance_;
class S2C_LOGIN_RESULT;
struct S2C_LOGIN_RESULTDefaultTypeInternal;
extern S2C_LOGIN_RESULTDefaultTypeInternal _S2C_LOGIN_RESULT_default_instance_;
class S2C_LOGOUT_RESULT;
struct S2C_LOGOUT_RESULTDefaultTypeInternal;
extern S2C_LOGOUT_RESULTDefaultTypeInternal _S2C_LOGOUT_RESULT_default_instance_;
class S2C_MOVE;
struct S2C_MOVEDefaultTypeInternal;
extern S2C_MOVEDefaultTypeInternal _S2C_MOVE_default_instance_;
class S2C_MOVE_RESULT;
struct S2C_MOVE_RESULTDefaultTypeInternal;
extern S2C_MOVE_RESULTDefaultTypeInternal _S2C_MOVE_RESULT_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_CHAT* Arena::CreateMaybeMessage<::Protocol::C2S_CHAT>(Arena*);
template<> ::Protocol::C2S_LOGIN* Arena::CreateMaybeMessage<::Protocol::C2S_LOGIN>(Arena*);
template<> ::Protocol::C2S_LOGIN_ADMIN* Arena::CreateMaybeMessage<::Protocol::C2S_LOGIN_ADMIN>(Arena*);
template<> ::Protocol::C2S_LOGOUT* Arena::CreateMaybeMessage<::Protocol::C2S_LOGOUT>(Arena*);
template<> ::Protocol::C2S_MOVE* Arena::CreateMaybeMessage<::Protocol::C2S_MOVE>(Arena*);
template<> ::Protocol::PLAYER_POS_INFO* Arena::CreateMaybeMessage<::Protocol::PLAYER_POS_INFO>(Arena*);
template<> ::Protocol::S2C_CHAT* Arena::CreateMaybeMessage<::Protocol::S2C_CHAT>(Arena*);
template<> ::Protocol::S2C_ENTER* Arena::CreateMaybeMessage<::Protocol::S2C_ENTER>(Arena*);
template<> ::Protocol::S2C_LEAVE* Arena::CreateMaybeMessage<::Protocol::S2C_LEAVE>(Arena*);
template<> ::Protocol::S2C_LOGIN_ADMIN_RESULT* Arena::CreateMaybeMessage<::Protocol::S2C_LOGIN_ADMIN_RESULT>(Arena*);
template<> ::Protocol::S2C_LOGIN_RESULT* Arena::CreateMaybeMessage<::Protocol::S2C_LOGIN_RESULT>(Arena*);
template<> ::Protocol::S2C_LOGOUT_RESULT* Arena::CreateMaybeMessage<::Protocol::S2C_LOGOUT_RESULT>(Arena*);
template<> ::Protocol::S2C_MOVE* Arena::CreateMaybeMessage<::Protocol::S2C_MOVE>(Arena*);
template<> ::Protocol::S2C_MOVE_RESULT* Arena::CreateMaybeMessage<::Protocol::S2C_MOVE_RESULT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class PLAYER_POS_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PLAYER_POS_INFO) */ {
 public:
  inline PLAYER_POS_INFO() : PLAYER_POS_INFO(nullptr) {}
  ~PLAYER_POS_INFO() override;
  explicit PROTOBUF_CONSTEXPR PLAYER_POS_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PLAYER_POS_INFO(const PLAYER_POS_INFO& from);
  PLAYER_POS_INFO(PLAYER_POS_INFO&& from) noexcept
    : PLAYER_POS_INFO() {
    *this = ::std::move(from);
  }

  inline PLAYER_POS_INFO& operator=(const PLAYER_POS_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline PLAYER_POS_INFO& operator=(PLAYER_POS_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PLAYER_POS_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const PLAYER_POS_INFO* internal_default_instance() {
    return reinterpret_cast<const PLAYER_POS_INFO*>(
               &_PLAYER_POS_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PLAYER_POS_INFO& a, PLAYER_POS_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(PLAYER_POS_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PLAYER_POS_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PLAYER_POS_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PLAYER_POS_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PLAYER_POS_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PLAYER_POS_INFO& from) {
    PLAYER_POS_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PLAYER_POS_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PLAYER_POS_INFO";
  }
  protected:
  explicit PLAYER_POS_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kYawFieldNumber = 4,
    kPitchFieldNumber = 5,
    kRollFieldNumber = 6,
    kVxFieldNumber = 7,
    kVyFieldNumber = 8,
    kVzFieldNumber = 9,
    kAxFieldNumber = 10,
    kAyFieldNumber = 11,
    kAzFieldNumber = 12,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 4;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float pitch = 5;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float roll = 6;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float vx = 7;
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // float vy = 8;
  void clear_vy();
  float vy() const;
  void set_vy(float value);
  private:
  float _internal_vy() const;
  void _internal_set_vy(float value);
  public:

  // float vz = 9;
  void clear_vz();
  float vz() const;
  void set_vz(float value);
  private:
  float _internal_vz() const;
  void _internal_set_vz(float value);
  public:

  // float ax = 10;
  void clear_ax();
  float ax() const;
  void set_ax(float value);
  private:
  float _internal_ax() const;
  void _internal_set_ax(float value);
  public:

  // float ay = 11;
  void clear_ay();
  float ay() const;
  void set_ay(float value);
  private:
  float _internal_ay() const;
  void _internal_set_ay(float value);
  public:

  // float az = 12;
  void clear_az();
  float az() const;
  void set_az(float value);
  private:
  float _internal_az() const;
  void _internal_set_az(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PLAYER_POS_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float yaw_;
    float pitch_;
    float roll_;
    float vx_;
    float vy_;
    float vz_;
    float ax_;
    float ay_;
    float az_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LOGIN) */ {
 public:
  inline C2S_LOGIN() : C2S_LOGIN(nullptr) {}
  ~C2S_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR C2S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LOGIN(const C2S_LOGIN& from);
  C2S_LOGIN(C2S_LOGIN&& from) noexcept
    : C2S_LOGIN() {
    *this = ::std::move(from);
  }

  inline C2S_LOGIN& operator=(const C2S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LOGIN& operator=(C2S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C2S_LOGIN*>(
               &_C2S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2S_LOGIN& a, C2S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_LOGIN& from) {
    C2S_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LOGIN";
  }
  protected:
  explicit C2S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPlayerPwFieldNumber = 2,
    kPlayerTypeFieldNumber = 3,
    kLoginTimeFieldNumber = 4,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string player_pw = 2;
  void clear_player_pw();
  const std::string& player_pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_pw();
  PROTOBUF_NODISCARD std::string* release_player_pw();
  void set_allocated_player_pw(std::string* player_pw);
  private:
  const std::string& _internal_player_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_pw(const std::string& value);
  std::string* _internal_mutable_player_pw();
  public:

  // int32 player_type = 3;
  void clear_player_type();
  int32_t player_type() const;
  void set_player_type(int32_t value);
  private:
  int32_t _internal_player_type() const;
  void _internal_set_player_type(int32_t value);
  public:

  // int32 login_time = 4;
  void clear_login_time();
  int32_t login_time() const;
  void set_login_time(int32_t value);
  private:
  int32_t _internal_login_time() const;
  void _internal_set_login_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_pw_;
    int32_t player_type_;
    int32_t login_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_LOGIN_RESULT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LOGIN_RESULT) */ {
 public:
  inline S2C_LOGIN_RESULT() : S2C_LOGIN_RESULT(nullptr) {}
  ~S2C_LOGIN_RESULT() override;
  explicit PROTOBUF_CONSTEXPR S2C_LOGIN_RESULT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LOGIN_RESULT(const S2C_LOGIN_RESULT& from);
  S2C_LOGIN_RESULT(S2C_LOGIN_RESULT&& from) noexcept
    : S2C_LOGIN_RESULT() {
    *this = ::std::move(from);
  }

  inline S2C_LOGIN_RESULT& operator=(const S2C_LOGIN_RESULT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LOGIN_RESULT& operator=(S2C_LOGIN_RESULT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LOGIN_RESULT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LOGIN_RESULT* internal_default_instance() {
    return reinterpret_cast<const S2C_LOGIN_RESULT*>(
               &_S2C_LOGIN_RESULT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S2C_LOGIN_RESULT& a, S2C_LOGIN_RESULT& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LOGIN_RESULT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LOGIN_RESULT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LOGIN_RESULT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LOGIN_RESULT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LOGIN_RESULT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LOGIN_RESULT& from) {
    S2C_LOGIN_RESULT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LOGIN_RESULT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LOGIN_RESULT";
  }
  protected:
  explicit S2C_LOGIN_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStrIdFieldNumber = 4,
    kPosInfoFieldNumber = 7,
    kSessionIdFieldNumber = 1,
    kResultFieldNumber = 2,
    kPlayerTypeFieldNumber = 3,
    kLoginTimeFieldNumber = 6,
    kTimeStampFieldNumber = 5,
  };
  // string player_str_id = 4;
  void clear_player_str_id();
  const std::string& player_str_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_str_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_str_id();
  PROTOBUF_NODISCARD std::string* release_player_str_id();
  void set_allocated_player_str_id(std::string* player_str_id);
  private:
  const std::string& _internal_player_str_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_str_id(const std::string& value);
  std::string* _internal_mutable_player_str_id();
  public:

  // .Protocol.PLAYER_POS_INFO pos_info = 7;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PLAYER_POS_INFO& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PLAYER_POS_INFO* release_pos_info();
  ::Protocol::PLAYER_POS_INFO* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PLAYER_POS_INFO* pos_info);
  private:
  const ::Protocol::PLAYER_POS_INFO& _internal_pos_info() const;
  ::Protocol::PLAYER_POS_INFO* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PLAYER_POS_INFO* pos_info);
  ::Protocol::PLAYER_POS_INFO* unsafe_arena_release_pos_info();

  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 player_type = 3;
  void clear_player_type();
  int32_t player_type() const;
  void set_player_type(int32_t value);
  private:
  int32_t _internal_player_type() const;
  void _internal_set_player_type(int32_t value);
  public:

  // int32 login_time = 6;
  void clear_login_time();
  int32_t login_time() const;
  void set_login_time(int32_t value);
  private:
  int32_t _internal_login_time() const;
  void _internal_set_login_time(int32_t value);
  public:

  // int64 time_stamp = 5;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LOGIN_RESULT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_str_id_;
    ::Protocol::PLAYER_POS_INFO* pos_info_;
    int32_t session_id_;
    bool result_;
    int32_t player_type_;
    int32_t login_time_;
    int64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_LOGOUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LOGOUT) */ {
 public:
  inline C2S_LOGOUT() : C2S_LOGOUT(nullptr) {}
  ~C2S_LOGOUT() override;
  explicit PROTOBUF_CONSTEXPR C2S_LOGOUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LOGOUT(const C2S_LOGOUT& from);
  C2S_LOGOUT(C2S_LOGOUT&& from) noexcept
    : C2S_LOGOUT() {
    *this = ::std::move(from);
  }

  inline C2S_LOGOUT& operator=(const C2S_LOGOUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LOGOUT& operator=(C2S_LOGOUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LOGOUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LOGOUT* internal_default_instance() {
    return reinterpret_cast<const C2S_LOGOUT*>(
               &_C2S_LOGOUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2S_LOGOUT& a, C2S_LOGOUT& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LOGOUT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LOGOUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LOGOUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LOGOUT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LOGOUT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_LOGOUT& from) {
    C2S_LOGOUT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LOGOUT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LOGOUT";
  }
  protected:
  explicit C2S_LOGOUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LOGOUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t session_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_LOGOUT_RESULT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LOGOUT_RESULT) */ {
 public:
  inline S2C_LOGOUT_RESULT() : S2C_LOGOUT_RESULT(nullptr) {}
  ~S2C_LOGOUT_RESULT() override;
  explicit PROTOBUF_CONSTEXPR S2C_LOGOUT_RESULT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LOGOUT_RESULT(const S2C_LOGOUT_RESULT& from);
  S2C_LOGOUT_RESULT(S2C_LOGOUT_RESULT&& from) noexcept
    : S2C_LOGOUT_RESULT() {
    *this = ::std::move(from);
  }

  inline S2C_LOGOUT_RESULT& operator=(const S2C_LOGOUT_RESULT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LOGOUT_RESULT& operator=(S2C_LOGOUT_RESULT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LOGOUT_RESULT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LOGOUT_RESULT* internal_default_instance() {
    return reinterpret_cast<const S2C_LOGOUT_RESULT*>(
               &_S2C_LOGOUT_RESULT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S2C_LOGOUT_RESULT& a, S2C_LOGOUT_RESULT& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LOGOUT_RESULT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LOGOUT_RESULT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LOGOUT_RESULT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LOGOUT_RESULT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LOGOUT_RESULT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LOGOUT_RESULT& from) {
    S2C_LOGOUT_RESULT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LOGOUT_RESULT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LOGOUT_RESULT";
  }
  protected:
  explicit S2C_LOGOUT_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LOGOUT_RESULT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t session_id_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_LOGIN_ADMIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LOGIN_ADMIN) */ {
 public:
  inline C2S_LOGIN_ADMIN() : C2S_LOGIN_ADMIN(nullptr) {}
  ~C2S_LOGIN_ADMIN() override;
  explicit PROTOBUF_CONSTEXPR C2S_LOGIN_ADMIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LOGIN_ADMIN(const C2S_LOGIN_ADMIN& from);
  C2S_LOGIN_ADMIN(C2S_LOGIN_ADMIN&& from) noexcept
    : C2S_LOGIN_ADMIN() {
    *this = ::std::move(from);
  }

  inline C2S_LOGIN_ADMIN& operator=(const C2S_LOGIN_ADMIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LOGIN_ADMIN& operator=(C2S_LOGIN_ADMIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LOGIN_ADMIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LOGIN_ADMIN* internal_default_instance() {
    return reinterpret_cast<const C2S_LOGIN_ADMIN*>(
               &_C2S_LOGIN_ADMIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C2S_LOGIN_ADMIN& a, C2S_LOGIN_ADMIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LOGIN_ADMIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LOGIN_ADMIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LOGIN_ADMIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LOGIN_ADMIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LOGIN_ADMIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_LOGIN_ADMIN& from) {
    C2S_LOGIN_ADMIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LOGIN_ADMIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LOGIN_ADMIN";
  }
  protected:
  explicit C2S_LOGIN_ADMIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminIdFieldNumber = 1,
    kAdminPwFieldNumber = 2,
  };
  // string admin_id = 1;
  void clear_admin_id();
  const std::string& admin_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_id();
  PROTOBUF_NODISCARD std::string* release_admin_id();
  void set_allocated_admin_id(std::string* admin_id);
  private:
  const std::string& _internal_admin_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_id(const std::string& value);
  std::string* _internal_mutable_admin_id();
  public:

  // string admin_pw = 2;
  void clear_admin_pw();
  const std::string& admin_pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_admin_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_admin_pw();
  PROTOBUF_NODISCARD std::string* release_admin_pw();
  void set_allocated_admin_pw(std::string* admin_pw);
  private:
  const std::string& _internal_admin_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin_pw(const std::string& value);
  std::string* _internal_mutable_admin_pw();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LOGIN_ADMIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_pw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_LOGIN_ADMIN_RESULT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LOGIN_ADMIN_RESULT) */ {
 public:
  inline S2C_LOGIN_ADMIN_RESULT() : S2C_LOGIN_ADMIN_RESULT(nullptr) {}
  ~S2C_LOGIN_ADMIN_RESULT() override;
  explicit PROTOBUF_CONSTEXPR S2C_LOGIN_ADMIN_RESULT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LOGIN_ADMIN_RESULT(const S2C_LOGIN_ADMIN_RESULT& from);
  S2C_LOGIN_ADMIN_RESULT(S2C_LOGIN_ADMIN_RESULT&& from) noexcept
    : S2C_LOGIN_ADMIN_RESULT() {
    *this = ::std::move(from);
  }

  inline S2C_LOGIN_ADMIN_RESULT& operator=(const S2C_LOGIN_ADMIN_RESULT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LOGIN_ADMIN_RESULT& operator=(S2C_LOGIN_ADMIN_RESULT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LOGIN_ADMIN_RESULT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LOGIN_ADMIN_RESULT* internal_default_instance() {
    return reinterpret_cast<const S2C_LOGIN_ADMIN_RESULT*>(
               &_S2C_LOGIN_ADMIN_RESULT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S2C_LOGIN_ADMIN_RESULT& a, S2C_LOGIN_ADMIN_RESULT& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LOGIN_ADMIN_RESULT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LOGIN_ADMIN_RESULT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LOGIN_ADMIN_RESULT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LOGIN_ADMIN_RESULT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LOGIN_ADMIN_RESULT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LOGIN_ADMIN_RESULT& from) {
    S2C_LOGIN_ADMIN_RESULT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LOGIN_ADMIN_RESULT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LOGIN_ADMIN_RESULT";
  }
  protected:
  explicit S2C_LOGIN_ADMIN_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LOGIN_ADMIN_RESULT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t session_id_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_MOVE) */ {
 public:
  inline C2S_MOVE() : C2S_MOVE(nullptr) {}
  ~C2S_MOVE() override;
  explicit PROTOBUF_CONSTEXPR C2S_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_MOVE(const C2S_MOVE& from);
  C2S_MOVE(C2S_MOVE&& from) noexcept
    : C2S_MOVE() {
    *this = ::std::move(from);
  }

  inline C2S_MOVE& operator=(const C2S_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_MOVE& operator=(C2S_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_MOVE* internal_default_instance() {
    return reinterpret_cast<const C2S_MOVE*>(
               &_C2S_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C2S_MOVE& a, C2S_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_MOVE& from) {
    C2S_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_MOVE";
  }
  protected:
  explicit C2S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 2,
    kSessionIdFieldNumber = 1,
    kRequestResultFieldNumber = 4,
    kTimeStampFieldNumber = 3,
  };
  // .Protocol.PLAYER_POS_INFO pos_info = 2;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PLAYER_POS_INFO& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PLAYER_POS_INFO* release_pos_info();
  ::Protocol::PLAYER_POS_INFO* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PLAYER_POS_INFO* pos_info);
  private:
  const ::Protocol::PLAYER_POS_INFO& _internal_pos_info() const;
  ::Protocol::PLAYER_POS_INFO* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PLAYER_POS_INFO* pos_info);
  ::Protocol::PLAYER_POS_INFO* unsafe_arena_release_pos_info();

  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // bool request_result = 4;
  void clear_request_result();
  bool request_result() const;
  void set_request_result(bool value);
  private:
  bool _internal_request_result() const;
  void _internal_set_request_result(bool value);
  public:

  // int64 time_stamp = 3;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PLAYER_POS_INFO* pos_info_;
    int32_t session_id_;
    bool request_result_;
    int64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_MOVE_RESULT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_MOVE_RESULT) */ {
 public:
  inline S2C_MOVE_RESULT() : S2C_MOVE_RESULT(nullptr) {}
  ~S2C_MOVE_RESULT() override;
  explicit PROTOBUF_CONSTEXPR S2C_MOVE_RESULT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_MOVE_RESULT(const S2C_MOVE_RESULT& from);
  S2C_MOVE_RESULT(S2C_MOVE_RESULT&& from) noexcept
    : S2C_MOVE_RESULT() {
    *this = ::std::move(from);
  }

  inline S2C_MOVE_RESULT& operator=(const S2C_MOVE_RESULT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_MOVE_RESULT& operator=(S2C_MOVE_RESULT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_MOVE_RESULT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_MOVE_RESULT* internal_default_instance() {
    return reinterpret_cast<const S2C_MOVE_RESULT*>(
               &_S2C_MOVE_RESULT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S2C_MOVE_RESULT& a, S2C_MOVE_RESULT& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_MOVE_RESULT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_MOVE_RESULT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_MOVE_RESULT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_MOVE_RESULT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_MOVE_RESULT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_MOVE_RESULT& from) {
    S2C_MOVE_RESULT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_MOVE_RESULT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_MOVE_RESULT";
  }
  protected:
  explicit S2C_MOVE_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 2,
    kProcessTimeFieldNumber = 3,
    kSendTimeFieldNumber = 4,
    kRecvTimeFieldNumber = 5,
    kSessionIdFieldNumber = 1,
  };
  // int64 time_stamp = 2;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // int64 process_time = 3;
  void clear_process_time();
  int64_t process_time() const;
  void set_process_time(int64_t value);
  private:
  int64_t _internal_process_time() const;
  void _internal_set_process_time(int64_t value);
  public:

  // int64 send_time = 4;
  void clear_send_time();
  int64_t send_time() const;
  void set_send_time(int64_t value);
  private:
  int64_t _internal_send_time() const;
  void _internal_set_send_time(int64_t value);
  public:

  // int64 recv_time = 5;
  void clear_recv_time();
  int64_t recv_time() const;
  void set_recv_time(int64_t value);
  private:
  int64_t _internal_recv_time() const;
  void _internal_set_recv_time(int64_t value);
  public:

  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_MOVE_RESULT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t time_stamp_;
    int64_t process_time_;
    int64_t send_time_;
    int64_t recv_time_;
    int32_t session_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_MOVE) */ {
 public:
  inline S2C_MOVE() : S2C_MOVE(nullptr) {}
  ~S2C_MOVE() override;
  explicit PROTOBUF_CONSTEXPR S2C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_MOVE(const S2C_MOVE& from);
  S2C_MOVE(S2C_MOVE&& from) noexcept
    : S2C_MOVE() {
    *this = ::std::move(from);
  }

  inline S2C_MOVE& operator=(const S2C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_MOVE& operator=(S2C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_MOVE* internal_default_instance() {
    return reinterpret_cast<const S2C_MOVE*>(
               &_S2C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2C_MOVE& a, S2C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_MOVE& from) {
    S2C_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_MOVE";
  }
  protected:
  explicit S2C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 4,
    kSessionIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kTimeStampFieldNumber = 3,
  };
  // .Protocol.PLAYER_POS_INFO pos_info = 4;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PLAYER_POS_INFO& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PLAYER_POS_INFO* release_pos_info();
  ::Protocol::PLAYER_POS_INFO* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PLAYER_POS_INFO* pos_info);
  private:
  const ::Protocol::PLAYER_POS_INFO& _internal_pos_info() const;
  ::Protocol::PLAYER_POS_INFO* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PLAYER_POS_INFO* pos_info);
  ::Protocol::PLAYER_POS_INFO* unsafe_arena_release_pos_info();

  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // int32 target_id = 2;
  void clear_target_id();
  int32_t target_id() const;
  void set_target_id(int32_t value);
  private:
  int32_t _internal_target_id() const;
  void _internal_set_target_id(int32_t value);
  public:

  // int64 time_stamp = 3;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PLAYER_POS_INFO* pos_info_;
    int32_t session_id_;
    int32_t target_id_;
    int64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_ENTER) */ {
 public:
  inline S2C_ENTER() : S2C_ENTER(nullptr) {}
  ~S2C_ENTER() override;
  explicit PROTOBUF_CONSTEXPR S2C_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ENTER(const S2C_ENTER& from);
  S2C_ENTER(S2C_ENTER&& from) noexcept
    : S2C_ENTER() {
    *this = ::std::move(from);
  }

  inline S2C_ENTER& operator=(const S2C_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ENTER& operator=(S2C_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ENTER* internal_default_instance() {
    return reinterpret_cast<const S2C_ENTER*>(
               &_S2C_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S2C_ENTER& a, S2C_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ENTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_ENTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_ENTER& from) {
    S2C_ENTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ENTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ENTER";
  }
  protected:
  explicit S2C_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetStrIdFieldNumber = 3,
    kPosInfoFieldNumber = 6,
    kSessionIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kTimeStampFieldNumber = 5,
    kPlayerTypeFieldNumber = 4,
  };
  // string target_str_id = 3;
  void clear_target_str_id();
  const std::string& target_str_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_str_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_str_id();
  PROTOBUF_NODISCARD std::string* release_target_str_id();
  void set_allocated_target_str_id(std::string* target_str_id);
  private:
  const std::string& _internal_target_str_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_str_id(const std::string& value);
  std::string* _internal_mutable_target_str_id();
  public:

  // .Protocol.PLAYER_POS_INFO pos_info = 6;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PLAYER_POS_INFO& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PLAYER_POS_INFO* release_pos_info();
  ::Protocol::PLAYER_POS_INFO* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PLAYER_POS_INFO* pos_info);
  private:
  const ::Protocol::PLAYER_POS_INFO& _internal_pos_info() const;
  ::Protocol::PLAYER_POS_INFO* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PLAYER_POS_INFO* pos_info);
  ::Protocol::PLAYER_POS_INFO* unsafe_arena_release_pos_info();

  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // int32 target_id = 2;
  void clear_target_id();
  int32_t target_id() const;
  void set_target_id(int32_t value);
  private:
  int32_t _internal_target_id() const;
  void _internal_set_target_id(int32_t value);
  public:

  // int64 time_stamp = 5;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // int32 player_type = 4;
  void clear_player_type();
  int32_t player_type() const;
  void set_player_type(int32_t value);
  private:
  int32_t _internal_player_type() const;
  void _internal_set_player_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_str_id_;
    ::Protocol::PLAYER_POS_INFO* pos_info_;
    int32_t session_id_;
    int32_t target_id_;
    int64_t time_stamp_;
    int32_t player_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LEAVE) */ {
 public:
  inline S2C_LEAVE() : S2C_LEAVE(nullptr) {}
  ~S2C_LEAVE() override;
  explicit PROTOBUF_CONSTEXPR S2C_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LEAVE(const S2C_LEAVE& from);
  S2C_LEAVE(S2C_LEAVE&& from) noexcept
    : S2C_LEAVE() {
    *this = ::std::move(from);
  }

  inline S2C_LEAVE& operator=(const S2C_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LEAVE& operator=(S2C_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LEAVE* internal_default_instance() {
    return reinterpret_cast<const S2C_LEAVE*>(
               &_S2C_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S2C_LEAVE& a, S2C_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LEAVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LEAVE& from) {
    S2C_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LEAVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LEAVE";
  }
  protected:
  explicit S2C_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // int32 target_id = 2;
  void clear_target_id();
  int32_t target_id() const;
  void set_target_id(int32_t value);
  private:
  int32_t _internal_target_id() const;
  void _internal_set_target_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t session_id_;
    int32_t target_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_CHAT) */ {
 public:
  inline C2S_CHAT() : C2S_CHAT(nullptr) {}
  ~C2S_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C2S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CHAT(const C2S_CHAT& from);
  C2S_CHAT(C2S_CHAT&& from) noexcept
    : C2S_CHAT() {
    *this = ::std::move(from);
  }

  inline C2S_CHAT& operator=(const C2S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CHAT& operator=(C2S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CHAT* internal_default_instance() {
    return reinterpret_cast<const C2S_CHAT*>(
               &_C2S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C2S_CHAT& a, C2S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_CHAT& from) {
    C2S_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_CHAT";
  }
  protected:
  explicit C2S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatFieldNumber = 2,
    kSessionIdFieldNumber = 1,
  };
  // string chat = 2;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
    int32_t session_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_CHAT) */ {
 public:
  inline S2C_CHAT() : S2C_CHAT(nullptr) {}
  ~S2C_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S2C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_CHAT(const S2C_CHAT& from);
  S2C_CHAT(S2C_CHAT&& from) noexcept
    : S2C_CHAT() {
    *this = ::std::move(from);
  }

  inline S2C_CHAT& operator=(const S2C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CHAT& operator=(S2C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CHAT* internal_default_instance() {
    return reinterpret_cast<const S2C_CHAT*>(
               &_S2C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S2C_CHAT& a, S2C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_CHAT& from) {
    S2C_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_CHAT";
  }
  protected:
  explicit S2C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetStrIdFieldNumber = 3,
    kChatFieldNumber = 4,
    kSessionIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // string target_str_id = 3;
  void clear_target_str_id();
  const std::string& target_str_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_str_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_str_id();
  PROTOBUF_NODISCARD std::string* release_target_str_id();
  void set_allocated_target_str_id(std::string* target_str_id);
  private:
  const std::string& _internal_target_str_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_str_id(const std::string& value);
  std::string* _internal_mutable_target_str_id();
  public:

  // string chat = 4;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int32 session_id = 1;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // int32 target_id = 2;
  void clear_target_id();
  int32_t target_id() const;
  void set_target_id(int32_t value);
  private:
  int32_t _internal_target_id() const;
  void _internal_set_target_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_str_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
    int32_t session_id_;
    int32_t target_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PLAYER_POS_INFO

// float x = 1;
inline void PLAYER_POS_INFO::clear_x() {
  _impl_.x_ = 0;
}
inline float PLAYER_POS_INFO::_internal_x() const {
  return _impl_.x_;
}
inline float PLAYER_POS_INFO::x() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.x)
  return _internal_x();
}
inline void PLAYER_POS_INFO::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PLAYER_POS_INFO::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.x)
}

// float y = 2;
inline void PLAYER_POS_INFO::clear_y() {
  _impl_.y_ = 0;
}
inline float PLAYER_POS_INFO::_internal_y() const {
  return _impl_.y_;
}
inline float PLAYER_POS_INFO::y() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.y)
  return _internal_y();
}
inline void PLAYER_POS_INFO::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PLAYER_POS_INFO::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.y)
}

// float z = 3;
inline void PLAYER_POS_INFO::clear_z() {
  _impl_.z_ = 0;
}
inline float PLAYER_POS_INFO::_internal_z() const {
  return _impl_.z_;
}
inline float PLAYER_POS_INFO::z() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.z)
  return _internal_z();
}
inline void PLAYER_POS_INFO::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PLAYER_POS_INFO::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.z)
}

// float yaw = 4;
inline void PLAYER_POS_INFO::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float PLAYER_POS_INFO::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float PLAYER_POS_INFO::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.yaw)
  return _internal_yaw();
}
inline void PLAYER_POS_INFO::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void PLAYER_POS_INFO::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.yaw)
}

// float pitch = 5;
inline void PLAYER_POS_INFO::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float PLAYER_POS_INFO::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float PLAYER_POS_INFO::pitch() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.pitch)
  return _internal_pitch();
}
inline void PLAYER_POS_INFO::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void PLAYER_POS_INFO::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.pitch)
}

// float roll = 6;
inline void PLAYER_POS_INFO::clear_roll() {
  _impl_.roll_ = 0;
}
inline float PLAYER_POS_INFO::_internal_roll() const {
  return _impl_.roll_;
}
inline float PLAYER_POS_INFO::roll() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.roll)
  return _internal_roll();
}
inline void PLAYER_POS_INFO::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void PLAYER_POS_INFO::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.roll)
}

// float vx = 7;
inline void PLAYER_POS_INFO::clear_vx() {
  _impl_.vx_ = 0;
}
inline float PLAYER_POS_INFO::_internal_vx() const {
  return _impl_.vx_;
}
inline float PLAYER_POS_INFO::vx() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.vx)
  return _internal_vx();
}
inline void PLAYER_POS_INFO::_internal_set_vx(float value) {
  
  _impl_.vx_ = value;
}
inline void PLAYER_POS_INFO::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.vx)
}

// float vy = 8;
inline void PLAYER_POS_INFO::clear_vy() {
  _impl_.vy_ = 0;
}
inline float PLAYER_POS_INFO::_internal_vy() const {
  return _impl_.vy_;
}
inline float PLAYER_POS_INFO::vy() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.vy)
  return _internal_vy();
}
inline void PLAYER_POS_INFO::_internal_set_vy(float value) {
  
  _impl_.vy_ = value;
}
inline void PLAYER_POS_INFO::set_vy(float value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.vy)
}

// float vz = 9;
inline void PLAYER_POS_INFO::clear_vz() {
  _impl_.vz_ = 0;
}
inline float PLAYER_POS_INFO::_internal_vz() const {
  return _impl_.vz_;
}
inline float PLAYER_POS_INFO::vz() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.vz)
  return _internal_vz();
}
inline void PLAYER_POS_INFO::_internal_set_vz(float value) {
  
  _impl_.vz_ = value;
}
inline void PLAYER_POS_INFO::set_vz(float value) {
  _internal_set_vz(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.vz)
}

// float ax = 10;
inline void PLAYER_POS_INFO::clear_ax() {
  _impl_.ax_ = 0;
}
inline float PLAYER_POS_INFO::_internal_ax() const {
  return _impl_.ax_;
}
inline float PLAYER_POS_INFO::ax() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.ax)
  return _internal_ax();
}
inline void PLAYER_POS_INFO::_internal_set_ax(float value) {
  
  _impl_.ax_ = value;
}
inline void PLAYER_POS_INFO::set_ax(float value) {
  _internal_set_ax(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.ax)
}

// float ay = 11;
inline void PLAYER_POS_INFO::clear_ay() {
  _impl_.ay_ = 0;
}
inline float PLAYER_POS_INFO::_internal_ay() const {
  return _impl_.ay_;
}
inline float PLAYER_POS_INFO::ay() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.ay)
  return _internal_ay();
}
inline void PLAYER_POS_INFO::_internal_set_ay(float value) {
  
  _impl_.ay_ = value;
}
inline void PLAYER_POS_INFO::set_ay(float value) {
  _internal_set_ay(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.ay)
}

// float az = 12;
inline void PLAYER_POS_INFO::clear_az() {
  _impl_.az_ = 0;
}
inline float PLAYER_POS_INFO::_internal_az() const {
  return _impl_.az_;
}
inline float PLAYER_POS_INFO::az() const {
  // @@protoc_insertion_point(field_get:Protocol.PLAYER_POS_INFO.az)
  return _internal_az();
}
inline void PLAYER_POS_INFO::_internal_set_az(float value) {
  
  _impl_.az_ = value;
}
inline void PLAYER_POS_INFO::set_az(float value) {
  _internal_set_az(value);
  // @@protoc_insertion_point(field_set:Protocol.PLAYER_POS_INFO.az)
}

// -------------------------------------------------------------------

// C2S_LOGIN

// string player_id = 1;
inline void C2S_LOGIN::clear_player_id() {
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& C2S_LOGIN::player_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LOGIN.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_LOGIN::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_LOGIN.player_id)
}
inline std::string* C2S_LOGIN::mutable_player_id() {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_LOGIN.player_id)
  return _s;
}
inline const std::string& C2S_LOGIN::_internal_player_id() const {
  return _impl_.player_id_.Get();
}
inline void C2S_LOGIN::_internal_set_player_id(const std::string& value) {
  
  _impl_.player_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_LOGIN::_internal_mutable_player_id() {
  
  return _impl_.player_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_LOGIN::release_player_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_LOGIN.player_id)
  return _impl_.player_id_.Release();
}
inline void C2S_LOGIN::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  _impl_.player_id_.SetAllocated(player_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_id_.IsDefault()) {
    _impl_.player_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_LOGIN.player_id)
}

// string player_pw = 2;
inline void C2S_LOGIN::clear_player_pw() {
  _impl_.player_pw_.ClearToEmpty();
}
inline const std::string& C2S_LOGIN::player_pw() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LOGIN.player_pw)
  return _internal_player_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_LOGIN::set_player_pw(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_pw_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_LOGIN.player_pw)
}
inline std::string* C2S_LOGIN::mutable_player_pw() {
  std::string* _s = _internal_mutable_player_pw();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_LOGIN.player_pw)
  return _s;
}
inline const std::string& C2S_LOGIN::_internal_player_pw() const {
  return _impl_.player_pw_.Get();
}
inline void C2S_LOGIN::_internal_set_player_pw(const std::string& value) {
  
  _impl_.player_pw_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_LOGIN::_internal_mutable_player_pw() {
  
  return _impl_.player_pw_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_LOGIN::release_player_pw() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_LOGIN.player_pw)
  return _impl_.player_pw_.Release();
}
inline void C2S_LOGIN::set_allocated_player_pw(std::string* player_pw) {
  if (player_pw != nullptr) {
    
  } else {
    
  }
  _impl_.player_pw_.SetAllocated(player_pw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_pw_.IsDefault()) {
    _impl_.player_pw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_LOGIN.player_pw)
}

// int32 player_type = 3;
inline void C2S_LOGIN::clear_player_type() {
  _impl_.player_type_ = 0;
}
inline int32_t C2S_LOGIN::_internal_player_type() const {
  return _impl_.player_type_;
}
inline int32_t C2S_LOGIN::player_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LOGIN.player_type)
  return _internal_player_type();
}
inline void C2S_LOGIN::_internal_set_player_type(int32_t value) {
  
  _impl_.player_type_ = value;
}
inline void C2S_LOGIN::set_player_type(int32_t value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_LOGIN.player_type)
}

// int32 login_time = 4;
inline void C2S_LOGIN::clear_login_time() {
  _impl_.login_time_ = 0;
}
inline int32_t C2S_LOGIN::_internal_login_time() const {
  return _impl_.login_time_;
}
inline int32_t C2S_LOGIN::login_time() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LOGIN.login_time)
  return _internal_login_time();
}
inline void C2S_LOGIN::_internal_set_login_time(int32_t value) {
  
  _impl_.login_time_ = value;
}
inline void C2S_LOGIN::set_login_time(int32_t value) {
  _internal_set_login_time(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_LOGIN.login_time)
}

// -------------------------------------------------------------------

// S2C_LOGIN_RESULT

// int32 session_id = 1;
inline void S2C_LOGIN_RESULT::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t S2C_LOGIN_RESULT::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t S2C_LOGIN_RESULT::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGIN_RESULT.session_id)
  return _internal_session_id();
}
inline void S2C_LOGIN_RESULT::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void S2C_LOGIN_RESULT::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGIN_RESULT.session_id)
}

// bool result = 2;
inline void S2C_LOGIN_RESULT::clear_result() {
  _impl_.result_ = false;
}
inline bool S2C_LOGIN_RESULT::_internal_result() const {
  return _impl_.result_;
}
inline bool S2C_LOGIN_RESULT::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGIN_RESULT.result)
  return _internal_result();
}
inline void S2C_LOGIN_RESULT::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S2C_LOGIN_RESULT::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGIN_RESULT.result)
}

// int32 player_type = 3;
inline void S2C_LOGIN_RESULT::clear_player_type() {
  _impl_.player_type_ = 0;
}
inline int32_t S2C_LOGIN_RESULT::_internal_player_type() const {
  return _impl_.player_type_;
}
inline int32_t S2C_LOGIN_RESULT::player_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGIN_RESULT.player_type)
  return _internal_player_type();
}
inline void S2C_LOGIN_RESULT::_internal_set_player_type(int32_t value) {
  
  _impl_.player_type_ = value;
}
inline void S2C_LOGIN_RESULT::set_player_type(int32_t value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGIN_RESULT.player_type)
}

// string player_str_id = 4;
inline void S2C_LOGIN_RESULT::clear_player_str_id() {
  _impl_.player_str_id_.ClearToEmpty();
}
inline const std::string& S2C_LOGIN_RESULT::player_str_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGIN_RESULT.player_str_id)
  return _internal_player_str_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_LOGIN_RESULT::set_player_str_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_str_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGIN_RESULT.player_str_id)
}
inline std::string* S2C_LOGIN_RESULT::mutable_player_str_id() {
  std::string* _s = _internal_mutable_player_str_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LOGIN_RESULT.player_str_id)
  return _s;
}
inline const std::string& S2C_LOGIN_RESULT::_internal_player_str_id() const {
  return _impl_.player_str_id_.Get();
}
inline void S2C_LOGIN_RESULT::_internal_set_player_str_id(const std::string& value) {
  
  _impl_.player_str_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_LOGIN_RESULT::_internal_mutable_player_str_id() {
  
  return _impl_.player_str_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_LOGIN_RESULT::release_player_str_id() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_LOGIN_RESULT.player_str_id)
  return _impl_.player_str_id_.Release();
}
inline void S2C_LOGIN_RESULT::set_allocated_player_str_id(std::string* player_str_id) {
  if (player_str_id != nullptr) {
    
  } else {
    
  }
  _impl_.player_str_id_.SetAllocated(player_str_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_str_id_.IsDefault()) {
    _impl_.player_str_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_LOGIN_RESULT.player_str_id)
}

// int64 time_stamp = 5;
inline void S2C_LOGIN_RESULT::clear_time_stamp() {
  _impl_.time_stamp_ = int64_t{0};
}
inline int64_t S2C_LOGIN_RESULT::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline int64_t S2C_LOGIN_RESULT::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGIN_RESULT.time_stamp)
  return _internal_time_stamp();
}
inline void S2C_LOGIN_RESULT::_internal_set_time_stamp(int64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void S2C_LOGIN_RESULT::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGIN_RESULT.time_stamp)
}

// int32 login_time = 6;
inline void S2C_LOGIN_RESULT::clear_login_time() {
  _impl_.login_time_ = 0;
}
inline int32_t S2C_LOGIN_RESULT::_internal_login_time() const {
  return _impl_.login_time_;
}
inline int32_t S2C_LOGIN_RESULT::login_time() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGIN_RESULT.login_time)
  return _internal_login_time();
}
inline void S2C_LOGIN_RESULT::_internal_set_login_time(int32_t value) {
  
  _impl_.login_time_ = value;
}
inline void S2C_LOGIN_RESULT::set_login_time(int32_t value) {
  _internal_set_login_time(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGIN_RESULT.login_time)
}

// .Protocol.PLAYER_POS_INFO pos_info = 7;
inline bool S2C_LOGIN_RESULT::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool S2C_LOGIN_RESULT::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void S2C_LOGIN_RESULT::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PLAYER_POS_INFO& S2C_LOGIN_RESULT::_internal_pos_info() const {
  const ::Protocol::PLAYER_POS_INFO* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PLAYER_POS_INFO&>(
      ::Protocol::_PLAYER_POS_INFO_default_instance_);
}
inline const ::Protocol::PLAYER_POS_INFO& S2C_LOGIN_RESULT::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGIN_RESULT.pos_info)
  return _internal_pos_info();
}
inline void S2C_LOGIN_RESULT::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PLAYER_POS_INFO* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_LOGIN_RESULT.pos_info)
}
inline ::Protocol::PLAYER_POS_INFO* S2C_LOGIN_RESULT::release_pos_info() {
  
  ::Protocol::PLAYER_POS_INFO* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PLAYER_POS_INFO* S2C_LOGIN_RESULT::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_LOGIN_RESULT.pos_info)
  
  ::Protocol::PLAYER_POS_INFO* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PLAYER_POS_INFO* S2C_LOGIN_RESULT::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PLAYER_POS_INFO>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PLAYER_POS_INFO* S2C_LOGIN_RESULT::mutable_pos_info() {
  ::Protocol::PLAYER_POS_INFO* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LOGIN_RESULT.pos_info)
  return _msg;
}
inline void S2C_LOGIN_RESULT::set_allocated_pos_info(::Protocol::PLAYER_POS_INFO* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_LOGIN_RESULT.pos_info)
}

// -------------------------------------------------------------------

// C2S_LOGOUT

// int32 session_id = 1;
inline void C2S_LOGOUT::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t C2S_LOGOUT::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t C2S_LOGOUT::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LOGOUT.session_id)
  return _internal_session_id();
}
inline void C2S_LOGOUT::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void C2S_LOGOUT::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_LOGOUT.session_id)
}

// -------------------------------------------------------------------

// S2C_LOGOUT_RESULT

// int32 session_id = 1;
inline void S2C_LOGOUT_RESULT::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t S2C_LOGOUT_RESULT::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t S2C_LOGOUT_RESULT::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGOUT_RESULT.session_id)
  return _internal_session_id();
}
inline void S2C_LOGOUT_RESULT::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void S2C_LOGOUT_RESULT::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGOUT_RESULT.session_id)
}

// bool result = 2;
inline void S2C_LOGOUT_RESULT::clear_result() {
  _impl_.result_ = false;
}
inline bool S2C_LOGOUT_RESULT::_internal_result() const {
  return _impl_.result_;
}
inline bool S2C_LOGOUT_RESULT::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGOUT_RESULT.result)
  return _internal_result();
}
inline void S2C_LOGOUT_RESULT::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S2C_LOGOUT_RESULT::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGOUT_RESULT.result)
}

// -------------------------------------------------------------------

// C2S_LOGIN_ADMIN

// string admin_id = 1;
inline void C2S_LOGIN_ADMIN::clear_admin_id() {
  _impl_.admin_id_.ClearToEmpty();
}
inline const std::string& C2S_LOGIN_ADMIN::admin_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LOGIN_ADMIN.admin_id)
  return _internal_admin_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_LOGIN_ADMIN::set_admin_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.admin_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_LOGIN_ADMIN.admin_id)
}
inline std::string* C2S_LOGIN_ADMIN::mutable_admin_id() {
  std::string* _s = _internal_mutable_admin_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_LOGIN_ADMIN.admin_id)
  return _s;
}
inline const std::string& C2S_LOGIN_ADMIN::_internal_admin_id() const {
  return _impl_.admin_id_.Get();
}
inline void C2S_LOGIN_ADMIN::_internal_set_admin_id(const std::string& value) {
  
  _impl_.admin_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_LOGIN_ADMIN::_internal_mutable_admin_id() {
  
  return _impl_.admin_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_LOGIN_ADMIN::release_admin_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_LOGIN_ADMIN.admin_id)
  return _impl_.admin_id_.Release();
}
inline void C2S_LOGIN_ADMIN::set_allocated_admin_id(std::string* admin_id) {
  if (admin_id != nullptr) {
    
  } else {
    
  }
  _impl_.admin_id_.SetAllocated(admin_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.admin_id_.IsDefault()) {
    _impl_.admin_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_LOGIN_ADMIN.admin_id)
}

// string admin_pw = 2;
inline void C2S_LOGIN_ADMIN::clear_admin_pw() {
  _impl_.admin_pw_.ClearToEmpty();
}
inline const std::string& C2S_LOGIN_ADMIN::admin_pw() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LOGIN_ADMIN.admin_pw)
  return _internal_admin_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_LOGIN_ADMIN::set_admin_pw(ArgT0&& arg0, ArgT... args) {
 
 _impl_.admin_pw_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_LOGIN_ADMIN.admin_pw)
}
inline std::string* C2S_LOGIN_ADMIN::mutable_admin_pw() {
  std::string* _s = _internal_mutable_admin_pw();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_LOGIN_ADMIN.admin_pw)
  return _s;
}
inline const std::string& C2S_LOGIN_ADMIN::_internal_admin_pw() const {
  return _impl_.admin_pw_.Get();
}
inline void C2S_LOGIN_ADMIN::_internal_set_admin_pw(const std::string& value) {
  
  _impl_.admin_pw_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_LOGIN_ADMIN::_internal_mutable_admin_pw() {
  
  return _impl_.admin_pw_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_LOGIN_ADMIN::release_admin_pw() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_LOGIN_ADMIN.admin_pw)
  return _impl_.admin_pw_.Release();
}
inline void C2S_LOGIN_ADMIN::set_allocated_admin_pw(std::string* admin_pw) {
  if (admin_pw != nullptr) {
    
  } else {
    
  }
  _impl_.admin_pw_.SetAllocated(admin_pw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.admin_pw_.IsDefault()) {
    _impl_.admin_pw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_LOGIN_ADMIN.admin_pw)
}

// -------------------------------------------------------------------

// S2C_LOGIN_ADMIN_RESULT

// int32 session_id = 1;
inline void S2C_LOGIN_ADMIN_RESULT::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t S2C_LOGIN_ADMIN_RESULT::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t S2C_LOGIN_ADMIN_RESULT::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGIN_ADMIN_RESULT.session_id)
  return _internal_session_id();
}
inline void S2C_LOGIN_ADMIN_RESULT::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void S2C_LOGIN_ADMIN_RESULT::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGIN_ADMIN_RESULT.session_id)
}

// bool result = 2;
inline void S2C_LOGIN_ADMIN_RESULT::clear_result() {
  _impl_.result_ = false;
}
inline bool S2C_LOGIN_ADMIN_RESULT::_internal_result() const {
  return _impl_.result_;
}
inline bool S2C_LOGIN_ADMIN_RESULT::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LOGIN_ADMIN_RESULT.result)
  return _internal_result();
}
inline void S2C_LOGIN_ADMIN_RESULT::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S2C_LOGIN_ADMIN_RESULT::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LOGIN_ADMIN_RESULT.result)
}

// -------------------------------------------------------------------

// C2S_MOVE

// int32 session_id = 1;
inline void C2S_MOVE::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t C2S_MOVE::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t C2S_MOVE::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MOVE.session_id)
  return _internal_session_id();
}
inline void C2S_MOVE::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void C2S_MOVE::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_MOVE.session_id)
}

// int64 time_stamp = 3;
inline void C2S_MOVE::clear_time_stamp() {
  _impl_.time_stamp_ = int64_t{0};
}
inline int64_t C2S_MOVE::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline int64_t C2S_MOVE::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MOVE.time_stamp)
  return _internal_time_stamp();
}
inline void C2S_MOVE::_internal_set_time_stamp(int64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void C2S_MOVE::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_MOVE.time_stamp)
}

// .Protocol.PLAYER_POS_INFO pos_info = 2;
inline bool C2S_MOVE::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool C2S_MOVE::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void C2S_MOVE::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PLAYER_POS_INFO& C2S_MOVE::_internal_pos_info() const {
  const ::Protocol::PLAYER_POS_INFO* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PLAYER_POS_INFO&>(
      ::Protocol::_PLAYER_POS_INFO_default_instance_);
}
inline const ::Protocol::PLAYER_POS_INFO& C2S_MOVE::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MOVE.pos_info)
  return _internal_pos_info();
}
inline void C2S_MOVE::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PLAYER_POS_INFO* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_MOVE.pos_info)
}
inline ::Protocol::PLAYER_POS_INFO* C2S_MOVE::release_pos_info() {
  
  ::Protocol::PLAYER_POS_INFO* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PLAYER_POS_INFO* C2S_MOVE::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_MOVE.pos_info)
  
  ::Protocol::PLAYER_POS_INFO* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PLAYER_POS_INFO* C2S_MOVE::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PLAYER_POS_INFO>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PLAYER_POS_INFO* C2S_MOVE::mutable_pos_info() {
  ::Protocol::PLAYER_POS_INFO* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_MOVE.pos_info)
  return _msg;
}
inline void C2S_MOVE::set_allocated_pos_info(::Protocol::PLAYER_POS_INFO* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_MOVE.pos_info)
}

// bool request_result = 4;
inline void C2S_MOVE::clear_request_result() {
  _impl_.request_result_ = false;
}
inline bool C2S_MOVE::_internal_request_result() const {
  return _impl_.request_result_;
}
inline bool C2S_MOVE::request_result() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MOVE.request_result)
  return _internal_request_result();
}
inline void C2S_MOVE::_internal_set_request_result(bool value) {
  
  _impl_.request_result_ = value;
}
inline void C2S_MOVE::set_request_result(bool value) {
  _internal_set_request_result(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_MOVE.request_result)
}

// -------------------------------------------------------------------

// S2C_MOVE_RESULT

// int32 session_id = 1;
inline void S2C_MOVE_RESULT::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t S2C_MOVE_RESULT::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t S2C_MOVE_RESULT::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MOVE_RESULT.session_id)
  return _internal_session_id();
}
inline void S2C_MOVE_RESULT::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void S2C_MOVE_RESULT::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MOVE_RESULT.session_id)
}

// int64 time_stamp = 2;
inline void S2C_MOVE_RESULT::clear_time_stamp() {
  _impl_.time_stamp_ = int64_t{0};
}
inline int64_t S2C_MOVE_RESULT::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline int64_t S2C_MOVE_RESULT::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MOVE_RESULT.time_stamp)
  return _internal_time_stamp();
}
inline void S2C_MOVE_RESULT::_internal_set_time_stamp(int64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void S2C_MOVE_RESULT::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MOVE_RESULT.time_stamp)
}

// int64 process_time = 3;
inline void S2C_MOVE_RESULT::clear_process_time() {
  _impl_.process_time_ = int64_t{0};
}
inline int64_t S2C_MOVE_RESULT::_internal_process_time() const {
  return _impl_.process_time_;
}
inline int64_t S2C_MOVE_RESULT::process_time() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MOVE_RESULT.process_time)
  return _internal_process_time();
}
inline void S2C_MOVE_RESULT::_internal_set_process_time(int64_t value) {
  
  _impl_.process_time_ = value;
}
inline void S2C_MOVE_RESULT::set_process_time(int64_t value) {
  _internal_set_process_time(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MOVE_RESULT.process_time)
}

// int64 send_time = 4;
inline void S2C_MOVE_RESULT::clear_send_time() {
  _impl_.send_time_ = int64_t{0};
}
inline int64_t S2C_MOVE_RESULT::_internal_send_time() const {
  return _impl_.send_time_;
}
inline int64_t S2C_MOVE_RESULT::send_time() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MOVE_RESULT.send_time)
  return _internal_send_time();
}
inline void S2C_MOVE_RESULT::_internal_set_send_time(int64_t value) {
  
  _impl_.send_time_ = value;
}
inline void S2C_MOVE_RESULT::set_send_time(int64_t value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MOVE_RESULT.send_time)
}

// int64 recv_time = 5;
inline void S2C_MOVE_RESULT::clear_recv_time() {
  _impl_.recv_time_ = int64_t{0};
}
inline int64_t S2C_MOVE_RESULT::_internal_recv_time() const {
  return _impl_.recv_time_;
}
inline int64_t S2C_MOVE_RESULT::recv_time() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MOVE_RESULT.recv_time)
  return _internal_recv_time();
}
inline void S2C_MOVE_RESULT::_internal_set_recv_time(int64_t value) {
  
  _impl_.recv_time_ = value;
}
inline void S2C_MOVE_RESULT::set_recv_time(int64_t value) {
  _internal_set_recv_time(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MOVE_RESULT.recv_time)
}

// -------------------------------------------------------------------

// S2C_MOVE

// int32 session_id = 1;
inline void S2C_MOVE::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t S2C_MOVE::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t S2C_MOVE::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MOVE.session_id)
  return _internal_session_id();
}
inline void S2C_MOVE::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void S2C_MOVE::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MOVE.session_id)
}

// int32 target_id = 2;
inline void S2C_MOVE::clear_target_id() {
  _impl_.target_id_ = 0;
}
inline int32_t S2C_MOVE::_internal_target_id() const {
  return _impl_.target_id_;
}
inline int32_t S2C_MOVE::target_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MOVE.target_id)
  return _internal_target_id();
}
inline void S2C_MOVE::_internal_set_target_id(int32_t value) {
  
  _impl_.target_id_ = value;
}
inline void S2C_MOVE::set_target_id(int32_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MOVE.target_id)
}

// int64 time_stamp = 3;
inline void S2C_MOVE::clear_time_stamp() {
  _impl_.time_stamp_ = int64_t{0};
}
inline int64_t S2C_MOVE::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline int64_t S2C_MOVE::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MOVE.time_stamp)
  return _internal_time_stamp();
}
inline void S2C_MOVE::_internal_set_time_stamp(int64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void S2C_MOVE::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MOVE.time_stamp)
}

// .Protocol.PLAYER_POS_INFO pos_info = 4;
inline bool S2C_MOVE::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool S2C_MOVE::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void S2C_MOVE::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PLAYER_POS_INFO& S2C_MOVE::_internal_pos_info() const {
  const ::Protocol::PLAYER_POS_INFO* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PLAYER_POS_INFO&>(
      ::Protocol::_PLAYER_POS_INFO_default_instance_);
}
inline const ::Protocol::PLAYER_POS_INFO& S2C_MOVE::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MOVE.pos_info)
  return _internal_pos_info();
}
inline void S2C_MOVE::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PLAYER_POS_INFO* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MOVE.pos_info)
}
inline ::Protocol::PLAYER_POS_INFO* S2C_MOVE::release_pos_info() {
  
  ::Protocol::PLAYER_POS_INFO* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PLAYER_POS_INFO* S2C_MOVE::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MOVE.pos_info)
  
  ::Protocol::PLAYER_POS_INFO* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PLAYER_POS_INFO* S2C_MOVE::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PLAYER_POS_INFO>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PLAYER_POS_INFO* S2C_MOVE::mutable_pos_info() {
  ::Protocol::PLAYER_POS_INFO* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MOVE.pos_info)
  return _msg;
}
inline void S2C_MOVE::set_allocated_pos_info(::Protocol::PLAYER_POS_INFO* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MOVE.pos_info)
}

// -------------------------------------------------------------------

// S2C_ENTER

// int32 session_id = 1;
inline void S2C_ENTER::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t S2C_ENTER::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t S2C_ENTER::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ENTER.session_id)
  return _internal_session_id();
}
inline void S2C_ENTER::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void S2C_ENTER::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ENTER.session_id)
}

// int32 target_id = 2;
inline void S2C_ENTER::clear_target_id() {
  _impl_.target_id_ = 0;
}
inline int32_t S2C_ENTER::_internal_target_id() const {
  return _impl_.target_id_;
}
inline int32_t S2C_ENTER::target_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ENTER.target_id)
  return _internal_target_id();
}
inline void S2C_ENTER::_internal_set_target_id(int32_t value) {
  
  _impl_.target_id_ = value;
}
inline void S2C_ENTER::set_target_id(int32_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ENTER.target_id)
}

// string target_str_id = 3;
inline void S2C_ENTER::clear_target_str_id() {
  _impl_.target_str_id_.ClearToEmpty();
}
inline const std::string& S2C_ENTER::target_str_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ENTER.target_str_id)
  return _internal_target_str_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_ENTER::set_target_str_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_str_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_ENTER.target_str_id)
}
inline std::string* S2C_ENTER::mutable_target_str_id() {
  std::string* _s = _internal_mutable_target_str_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_ENTER.target_str_id)
  return _s;
}
inline const std::string& S2C_ENTER::_internal_target_str_id() const {
  return _impl_.target_str_id_.Get();
}
inline void S2C_ENTER::_internal_set_target_str_id(const std::string& value) {
  
  _impl_.target_str_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_ENTER::_internal_mutable_target_str_id() {
  
  return _impl_.target_str_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_ENTER::release_target_str_id() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_ENTER.target_str_id)
  return _impl_.target_str_id_.Release();
}
inline void S2C_ENTER::set_allocated_target_str_id(std::string* target_str_id) {
  if (target_str_id != nullptr) {
    
  } else {
    
  }
  _impl_.target_str_id_.SetAllocated(target_str_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_str_id_.IsDefault()) {
    _impl_.target_str_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_ENTER.target_str_id)
}

// int32 player_type = 4;
inline void S2C_ENTER::clear_player_type() {
  _impl_.player_type_ = 0;
}
inline int32_t S2C_ENTER::_internal_player_type() const {
  return _impl_.player_type_;
}
inline int32_t S2C_ENTER::player_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ENTER.player_type)
  return _internal_player_type();
}
inline void S2C_ENTER::_internal_set_player_type(int32_t value) {
  
  _impl_.player_type_ = value;
}
inline void S2C_ENTER::set_player_type(int32_t value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ENTER.player_type)
}

// int64 time_stamp = 5;
inline void S2C_ENTER::clear_time_stamp() {
  _impl_.time_stamp_ = int64_t{0};
}
inline int64_t S2C_ENTER::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline int64_t S2C_ENTER::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ENTER.time_stamp)
  return _internal_time_stamp();
}
inline void S2C_ENTER::_internal_set_time_stamp(int64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void S2C_ENTER::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ENTER.time_stamp)
}

// .Protocol.PLAYER_POS_INFO pos_info = 6;
inline bool S2C_ENTER::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool S2C_ENTER::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void S2C_ENTER::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PLAYER_POS_INFO& S2C_ENTER::_internal_pos_info() const {
  const ::Protocol::PLAYER_POS_INFO* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PLAYER_POS_INFO&>(
      ::Protocol::_PLAYER_POS_INFO_default_instance_);
}
inline const ::Protocol::PLAYER_POS_INFO& S2C_ENTER::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ENTER.pos_info)
  return _internal_pos_info();
}
inline void S2C_ENTER::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PLAYER_POS_INFO* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_ENTER.pos_info)
}
inline ::Protocol::PLAYER_POS_INFO* S2C_ENTER::release_pos_info() {
  
  ::Protocol::PLAYER_POS_INFO* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PLAYER_POS_INFO* S2C_ENTER::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_ENTER.pos_info)
  
  ::Protocol::PLAYER_POS_INFO* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PLAYER_POS_INFO* S2C_ENTER::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PLAYER_POS_INFO>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PLAYER_POS_INFO* S2C_ENTER::mutable_pos_info() {
  ::Protocol::PLAYER_POS_INFO* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_ENTER.pos_info)
  return _msg;
}
inline void S2C_ENTER::set_allocated_pos_info(::Protocol::PLAYER_POS_INFO* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_ENTER.pos_info)
}

// -------------------------------------------------------------------

// S2C_LEAVE

// int32 session_id = 1;
inline void S2C_LEAVE::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t S2C_LEAVE::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t S2C_LEAVE::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LEAVE.session_id)
  return _internal_session_id();
}
inline void S2C_LEAVE::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void S2C_LEAVE::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LEAVE.session_id)
}

// int32 target_id = 2;
inline void S2C_LEAVE::clear_target_id() {
  _impl_.target_id_ = 0;
}
inline int32_t S2C_LEAVE::_internal_target_id() const {
  return _impl_.target_id_;
}
inline int32_t S2C_LEAVE::target_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LEAVE.target_id)
  return _internal_target_id();
}
inline void S2C_LEAVE::_internal_set_target_id(int32_t value) {
  
  _impl_.target_id_ = value;
}
inline void S2C_LEAVE::set_target_id(int32_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LEAVE.target_id)
}

// -------------------------------------------------------------------

// C2S_CHAT

// int32 session_id = 1;
inline void C2S_CHAT::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t C2S_CHAT::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t C2S_CHAT::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CHAT.session_id)
  return _internal_session_id();
}
inline void C2S_CHAT::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void C2S_CHAT::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_CHAT.session_id)
}

// string chat = 2;
inline void C2S_CHAT::clear_chat() {
  _impl_.chat_.ClearToEmpty();
}
inline const std::string& C2S_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_CHAT.chat)
}
inline std::string* C2S_CHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_CHAT.chat)
  return _s;
}
inline const std::string& C2S_CHAT::_internal_chat() const {
  return _impl_.chat_.Get();
}
inline void C2S_CHAT::_internal_set_chat(const std::string& value) {
  
  _impl_.chat_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_CHAT::_internal_mutable_chat() {
  
  return _impl_.chat_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_CHAT.chat)
  return _impl_.chat_.Release();
}
inline void C2S_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  _impl_.chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_.IsDefault()) {
    _impl_.chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_CHAT.chat)
}

// -------------------------------------------------------------------

// S2C_CHAT

// int32 session_id = 1;
inline void S2C_CHAT::clear_session_id() {
  _impl_.session_id_ = 0;
}
inline int32_t S2C_CHAT::_internal_session_id() const {
  return _impl_.session_id_;
}
inline int32_t S2C_CHAT::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CHAT.session_id)
  return _internal_session_id();
}
inline void S2C_CHAT::_internal_set_session_id(int32_t value) {
  
  _impl_.session_id_ = value;
}
inline void S2C_CHAT::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_CHAT.session_id)
}

// int32 target_id = 2;
inline void S2C_CHAT::clear_target_id() {
  _impl_.target_id_ = 0;
}
inline int32_t S2C_CHAT::_internal_target_id() const {
  return _impl_.target_id_;
}
inline int32_t S2C_CHAT::target_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CHAT.target_id)
  return _internal_target_id();
}
inline void S2C_CHAT::_internal_set_target_id(int32_t value) {
  
  _impl_.target_id_ = value;
}
inline void S2C_CHAT::set_target_id(int32_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_CHAT.target_id)
}

// string target_str_id = 3;
inline void S2C_CHAT::clear_target_str_id() {
  _impl_.target_str_id_.ClearToEmpty();
}
inline const std::string& S2C_CHAT::target_str_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CHAT.target_str_id)
  return _internal_target_str_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_CHAT::set_target_str_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_str_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_CHAT.target_str_id)
}
inline std::string* S2C_CHAT::mutable_target_str_id() {
  std::string* _s = _internal_mutable_target_str_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_CHAT.target_str_id)
  return _s;
}
inline const std::string& S2C_CHAT::_internal_target_str_id() const {
  return _impl_.target_str_id_.Get();
}
inline void S2C_CHAT::_internal_set_target_str_id(const std::string& value) {
  
  _impl_.target_str_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_CHAT::_internal_mutable_target_str_id() {
  
  return _impl_.target_str_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_CHAT::release_target_str_id() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_CHAT.target_str_id)
  return _impl_.target_str_id_.Release();
}
inline void S2C_CHAT::set_allocated_target_str_id(std::string* target_str_id) {
  if (target_str_id != nullptr) {
    
  } else {
    
  }
  _impl_.target_str_id_.SetAllocated(target_str_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_str_id_.IsDefault()) {
    _impl_.target_str_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_CHAT.target_str_id)
}

// string chat = 4;
inline void S2C_CHAT::clear_chat() {
  _impl_.chat_.ClearToEmpty();
}
inline const std::string& S2C_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_CHAT.chat)
}
inline std::string* S2C_CHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_CHAT.chat)
  return _s;
}
inline const std::string& S2C_CHAT::_internal_chat() const {
  return _impl_.chat_.Get();
}
inline void S2C_CHAT::_internal_set_chat(const std::string& value) {
  
  _impl_.chat_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_CHAT::_internal_mutable_chat() {
  
  return _impl_.chat_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_CHAT.chat)
  return _impl_.chat_.Release();
}
inline void S2C_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  _impl_.chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_.IsDefault()) {
    _impl_.chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_CHAT.chat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
