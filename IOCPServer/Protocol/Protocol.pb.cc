// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR PLAYER_POS_INFO::PLAYER_POS_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.vx_)*/0
  , /*decltype(_impl_.vy_)*/0
  , /*decltype(_impl_.vz_)*/0
  , /*decltype(_impl_.ax_)*/0
  , /*decltype(_impl_.ay_)*/0
  , /*decltype(_impl_.az_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PLAYER_POS_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR PLAYER_POS_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PLAYER_POS_INFODefaultTypeInternal() {}
  union {
    PLAYER_POS_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PLAYER_POS_INFODefaultTypeInternal _PLAYER_POS_INFO_default_instance_;
PROTOBUF_CONSTEXPR C2S_LOGIN::C2S_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_pw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.login_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_LOGINDefaultTypeInternal() {}
  union {
    C2S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_LOGINDefaultTypeInternal _C2S_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S2C_LOGIN_RESULT::S2C_LOGIN_RESULT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.session_id_)*/0
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_.time_stamp_)*/int64_t{0}
  , /*decltype(_impl_.login_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_LOGIN_RESULTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_LOGIN_RESULTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_LOGIN_RESULTDefaultTypeInternal() {}
  union {
    S2C_LOGIN_RESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_LOGIN_RESULTDefaultTypeInternal _S2C_LOGIN_RESULT_default_instance_;
PROTOBUF_CONSTEXPR C2S_LOGIN_ADMIN::C2S_LOGIN_ADMIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.admin_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.admin_pw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_LOGIN_ADMINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_LOGIN_ADMINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_LOGIN_ADMINDefaultTypeInternal() {}
  union {
    C2S_LOGIN_ADMIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_LOGIN_ADMINDefaultTypeInternal _C2S_LOGIN_ADMIN_default_instance_;
PROTOBUF_CONSTEXPR S2C_LOGIN_ADMIN_RESULT::S2C_LOGIN_ADMIN_RESULT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/0
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_LOGIN_ADMIN_RESULTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_LOGIN_ADMIN_RESULTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_LOGIN_ADMIN_RESULTDefaultTypeInternal() {}
  union {
    S2C_LOGIN_ADMIN_RESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_LOGIN_ADMIN_RESULTDefaultTypeInternal _S2C_LOGIN_ADMIN_RESULT_default_instance_;
PROTOBUF_CONSTEXPR C2S_MOVE::C2S_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.session_id_)*/0
  , /*decltype(_impl_.request_result_)*/false
  , /*decltype(_impl_.time_stamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_MOVEDefaultTypeInternal() {}
  union {
    C2S_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_MOVEDefaultTypeInternal _C2S_MOVE_default_instance_;
PROTOBUF_CONSTEXPR S2C_MOVE_RESULT::S2C_MOVE_RESULT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_stamp_)*/int64_t{0}
  , /*decltype(_impl_.process_time_)*/int64_t{0}
  , /*decltype(_impl_.send_time_)*/int64_t{0}
  , /*decltype(_impl_.recv_time_)*/int64_t{0}
  , /*decltype(_impl_.session_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_MOVE_RESULTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_MOVE_RESULTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_MOVE_RESULTDefaultTypeInternal() {}
  union {
    S2C_MOVE_RESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_MOVE_RESULTDefaultTypeInternal _S2C_MOVE_RESULT_default_instance_;
PROTOBUF_CONSTEXPR S2C_MOVE::S2C_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.session_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.time_stamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_MOVEDefaultTypeInternal() {}
  union {
    S2C_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_MOVEDefaultTypeInternal _S2C_MOVE_default_instance_;
PROTOBUF_CONSTEXPR S2C_ENTER::S2C_ENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.session_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.time_stamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_ENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_ENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_ENTERDefaultTypeInternal() {}
  union {
    S2C_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_ENTERDefaultTypeInternal _S2C_ENTER_default_instance_;
PROTOBUF_CONSTEXPR S2C_LEAVE::S2C_LEAVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_LEAVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_LEAVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_LEAVEDefaultTypeInternal() {}
  union {
    S2C_LEAVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_LEAVEDefaultTypeInternal _S2C_LEAVE_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.vx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.vy_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.vz_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.ax_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.ay_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PLAYER_POS_INFO, _impl_.az_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LOGIN, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LOGIN, _impl_.player_pw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LOGIN, _impl_.login_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LOGIN_RESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LOGIN_RESULT, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LOGIN_RESULT, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LOGIN_RESULT, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LOGIN_RESULT, _impl_.login_time_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LOGIN_RESULT, _impl_.pos_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LOGIN_ADMIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LOGIN_ADMIN, _impl_.admin_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LOGIN_ADMIN, _impl_.admin_pw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LOGIN_ADMIN_RESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LOGIN_ADMIN_RESULT, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LOGIN_ADMIN_RESULT, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MOVE, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MOVE, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MOVE, _impl_.pos_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MOVE, _impl_.request_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE_RESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE_RESULT, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE_RESULT, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE_RESULT, _impl_.process_time_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE_RESULT, _impl_.send_time_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE_RESULT, _impl_.recv_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MOVE, _impl_.pos_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ENTER, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ENTER, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ENTER, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ENTER, _impl_.pos_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LEAVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LEAVE, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LEAVE, _impl_.target_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::PLAYER_POS_INFO)},
  { 18, -1, -1, sizeof(::Protocol::C2S_LOGIN)},
  { 27, -1, -1, sizeof(::Protocol::S2C_LOGIN_RESULT)},
  { 38, -1, -1, sizeof(::Protocol::C2S_LOGIN_ADMIN)},
  { 46, -1, -1, sizeof(::Protocol::S2C_LOGIN_ADMIN_RESULT)},
  { 54, -1, -1, sizeof(::Protocol::C2S_MOVE)},
  { 64, -1, -1, sizeof(::Protocol::S2C_MOVE_RESULT)},
  { 75, -1, -1, sizeof(::Protocol::S2C_MOVE)},
  { 85, -1, -1, sizeof(::Protocol::S2C_ENTER)},
  { 95, -1, -1, sizeof(::Protocol::S2C_LEAVE)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_PLAYER_POS_INFO_default_instance_._instance,
  &::Protocol::_C2S_LOGIN_default_instance_._instance,
  &::Protocol::_S2C_LOGIN_RESULT_default_instance_._instance,
  &::Protocol::_C2S_LOGIN_ADMIN_default_instance_._instance,
  &::Protocol::_S2C_LOGIN_ADMIN_RESULT_default_instance_._instance,
  &::Protocol::_C2S_MOVE_default_instance_._instance,
  &::Protocol::_S2C_MOVE_RESULT_default_instance_._instance,
  &::Protocol::_S2C_MOVE_default_instance_._instance,
  &::Protocol::_S2C_ENTER_default_instance_._instance,
  &::Protocol::_S2C_LEAVE_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\"\244\001\n\017PLAYER_PO"
  "S_INFO\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022"
  "\013\n\003yaw\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\014\n\004roll\030\006 \001("
  "\002\022\n\n\002vx\030\007 \001(\002\022\n\n\002vy\030\010 \001(\002\022\n\n\002vz\030\t \001(\002\022\n\n"
  "\002ax\030\n \001(\002\022\n\n\002ay\030\013 \001(\002\022\n\n\002az\030\014 \001(\002\"E\n\tC2S"
  "_LOGIN\022\021\n\tplayer_id\030\001 \001(\t\022\021\n\tplayer_pw\030\002"
  " \001(\t\022\022\n\nlogin_time\030\003 \001(\005\"\213\001\n\020S2C_LOGIN_R"
  "ESULT\022\022\n\nsession_id\030\001 \001(\005\022\016\n\006result\030\002 \001("
  "\010\022\022\n\ntime_stamp\030\003 \001(\003\022\022\n\nlogin_time\030\004 \001("
  "\005\022+\n\010pos_info\030\005 \001(\0132\031.Protocol.PLAYER_PO"
  "S_INFO\"5\n\017C2S_LOGIN_ADMIN\022\020\n\010admin_id\030\001 "
  "\001(\t\022\020\n\010admin_pw\030\002 \001(\t\"<\n\026S2C_LOGIN_ADMIN"
  "_RESULT\022\022\n\nsession_id\030\001 \001(\005\022\016\n\006result\030\002 "
  "\001(\010\"w\n\010C2S_MOVE\022\022\n\nsession_id\030\001 \001(\005\022\022\n\nt"
  "ime_stamp\030\003 \001(\003\022+\n\010pos_info\030\002 \001(\0132\031.Prot"
  "ocol.PLAYER_POS_INFO\022\026\n\016request_result\030\004"
  " \001(\010\"u\n\017S2C_MOVE_RESULT\022\022\n\nsession_id\030\001 "
  "\001(\005\022\022\n\ntime_stamp\030\002 \001(\003\022\024\n\014process_time\030"
  "\003 \001(\003\022\021\n\tsend_time\030\004 \001(\003\022\021\n\trecv_time\030\005 "
  "\001(\003\"r\n\010S2C_MOVE\022\022\n\nsession_id\030\001 \001(\005\022\021\n\tt"
  "arget_id\030\002 \001(\005\022\022\n\ntime_stamp\030\003 \001(\003\022+\n\010po"
  "s_info\030\004 \001(\0132\031.Protocol.PLAYER_POS_INFO\""
  "s\n\tS2C_ENTER\022\022\n\nsession_id\030\001 \001(\005\022\021\n\ttarg"
  "et_id\030\002 \001(\005\022\022\n\ntime_stamp\030\003 \001(\003\022+\n\010pos_i"
  "nfo\030\004 \001(\0132\031.Protocol.PLAYER_POS_INFO\"2\n\t"
  "S2C_LEAVE\022\022\n\nsession_id\030\001 \001(\005\022\021\n\ttarget_"
  "id\030\002 \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 1056, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class PLAYER_POS_INFO::_Internal {
 public:
};

PLAYER_POS_INFO::PLAYER_POS_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PLAYER_POS_INFO)
}
PLAYER_POS_INFO::PLAYER_POS_INFO(const PLAYER_POS_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PLAYER_POS_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , decltype(_impl_.vx_){}
    , decltype(_impl_.vy_){}
    , decltype(_impl_.vz_){}
    , decltype(_impl_.ax_){}
    , decltype(_impl_.ay_){}
    , decltype(_impl_.az_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.az_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.az_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PLAYER_POS_INFO)
}

inline void PLAYER_POS_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , decltype(_impl_.vx_){0}
    , decltype(_impl_.vy_){0}
    , decltype(_impl_.vz_){0}
    , decltype(_impl_.ax_){0}
    , decltype(_impl_.ay_){0}
    , decltype(_impl_.az_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PLAYER_POS_INFO::~PLAYER_POS_INFO() {
  // @@protoc_insertion_point(destructor:Protocol.PLAYER_POS_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PLAYER_POS_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PLAYER_POS_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PLAYER_POS_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PLAYER_POS_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.az_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.az_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PLAYER_POS_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vz = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.vz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ax = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.ax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ay = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.ay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float az = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.az_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PLAYER_POS_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PLAYER_POS_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float yaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw(), target);
  }

  // float pitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_pitch(), target);
  }

  // float roll = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_roll(), target);
  }

  // float vx = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_vx(), target);
  }

  // float vy = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_vy(), target);
  }

  // float vz = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = this->_internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_vz(), target);
  }

  // float ax = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ax = this->_internal_ax();
  uint32_t raw_ax;
  memcpy(&raw_ax, &tmp_ax, sizeof(tmp_ax));
  if (raw_ax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_ax(), target);
  }

  // float ay = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ay = this->_internal_ay();
  uint32_t raw_ay;
  memcpy(&raw_ay, &tmp_ay, sizeof(tmp_ay));
  if (raw_ay != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_ay(), target);
  }

  // float az = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_az = this->_internal_az();
  uint32_t raw_az;
  memcpy(&raw_az, &tmp_az, sizeof(tmp_az));
  if (raw_az != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_az(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PLAYER_POS_INFO)
  return target;
}

size_t PLAYER_POS_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PLAYER_POS_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float roll = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float vx = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    total_size += 1 + 4;
  }

  // float vy = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    total_size += 1 + 4;
  }

  // float vz = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = this->_internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    total_size += 1 + 4;
  }

  // float ax = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ax = this->_internal_ax();
  uint32_t raw_ax;
  memcpy(&raw_ax, &tmp_ax, sizeof(tmp_ax));
  if (raw_ax != 0) {
    total_size += 1 + 4;
  }

  // float ay = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ay = this->_internal_ay();
  uint32_t raw_ay;
  memcpy(&raw_ay, &tmp_ay, sizeof(tmp_ay));
  if (raw_ay != 0) {
    total_size += 1 + 4;
  }

  // float az = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_az = this->_internal_az();
  uint32_t raw_az;
  memcpy(&raw_az, &tmp_az, sizeof(tmp_az));
  if (raw_az != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PLAYER_POS_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PLAYER_POS_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PLAYER_POS_INFO::GetClassData() const { return &_class_data_; }


void PLAYER_POS_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PLAYER_POS_INFO*>(&to_msg);
  auto& from = static_cast<const PLAYER_POS_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PLAYER_POS_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = from._internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    _this->_internal_set_vx(from._internal_vx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = from._internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    _this->_internal_set_vy(from._internal_vy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = from._internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    _this->_internal_set_vz(from._internal_vz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ax = from._internal_ax();
  uint32_t raw_ax;
  memcpy(&raw_ax, &tmp_ax, sizeof(tmp_ax));
  if (raw_ax != 0) {
    _this->_internal_set_ax(from._internal_ax());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ay = from._internal_ay();
  uint32_t raw_ay;
  memcpy(&raw_ay, &tmp_ay, sizeof(tmp_ay));
  if (raw_ay != 0) {
    _this->_internal_set_ay(from._internal_ay());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_az = from._internal_az();
  uint32_t raw_az;
  memcpy(&raw_az, &tmp_az, sizeof(tmp_az));
  if (raw_az != 0) {
    _this->_internal_set_az(from._internal_az());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PLAYER_POS_INFO::CopyFrom(const PLAYER_POS_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PLAYER_POS_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLAYER_POS_INFO::IsInitialized() const {
  return true;
}

void PLAYER_POS_INFO::InternalSwap(PLAYER_POS_INFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PLAYER_POS_INFO, _impl_.az_)
      + sizeof(PLAYER_POS_INFO::_impl_.az_)
      - PROTOBUF_FIELD_OFFSET(PLAYER_POS_INFO, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PLAYER_POS_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class C2S_LOGIN::_Internal {
 public:
};

C2S_LOGIN::C2S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_LOGIN)
}
C2S_LOGIN::C2S_LOGIN(const C2S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.player_pw_){}
    , decltype(_impl_.login_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_id().empty()) {
    _this->_impl_.player_id_.Set(from._internal_player_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_pw().empty()) {
    _this->_impl_.player_pw_.Set(from._internal_player_pw(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.login_time_ = from._impl_.login_time_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_LOGIN)
}

inline void C2S_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.player_pw_){}
    , decltype(_impl_.login_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C2S_LOGIN::~C2S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.player_pw_.Destroy();
}

void C2S_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.player_pw_.ClearToEmpty();
  _impl_.login_time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C2S_LOGIN.player_id"));
        } else
          goto handle_unusual;
        continue;
      // string player_pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C2S_LOGIN.player_pw"));
        } else
          goto handle_unusual;
        continue;
      // int32 login_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.login_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_id().data(), static_cast<int>(this->_internal_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_LOGIN.player_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_id(), target);
  }

  // string player_pw = 2;
  if (!this->_internal_player_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_pw().data(), static_cast<int>(this->_internal_player_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_LOGIN.player_pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_pw(), target);
  }

  // int32 login_time = 3;
  if (this->_internal_login_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_login_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_LOGIN)
  return target;
}

size_t C2S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_id());
  }

  // string player_pw = 2;
  if (!this->_internal_player_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_pw());
  }

  // int32 login_time = 3;
  if (this->_internal_login_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_login_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_LOGIN::GetClassData() const { return &_class_data_; }


void C2S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_LOGIN*>(&to_msg);
  auto& from = static_cast<const C2S_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_player_pw().empty()) {
    _this->_internal_set_player_pw(from._internal_player_pw());
  }
  if (from._internal_login_time() != 0) {
    _this->_internal_set_login_time(from._internal_login_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_LOGIN::CopyFrom(const C2S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LOGIN::IsInitialized() const {
  return true;
}

void C2S_LOGIN::InternalSwap(C2S_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_id_, lhs_arena,
      &other->_impl_.player_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_pw_, lhs_arena,
      &other->_impl_.player_pw_, rhs_arena
  );
  swap(_impl_.login_time_, other->_impl_.login_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class S2C_LOGIN_RESULT::_Internal {
 public:
  static const ::Protocol::PLAYER_POS_INFO& pos_info(const S2C_LOGIN_RESULT* msg);
};

const ::Protocol::PLAYER_POS_INFO&
S2C_LOGIN_RESULT::_Internal::pos_info(const S2C_LOGIN_RESULT* msg) {
  return *msg->_impl_.pos_info_;
}
S2C_LOGIN_RESULT::S2C_LOGIN_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_LOGIN_RESULT)
}
S2C_LOGIN_RESULT::S2C_LOGIN_RESULT(const S2C_LOGIN_RESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_LOGIN_RESULT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.time_stamp_){}
    , decltype(_impl_.login_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PLAYER_POS_INFO(*from._impl_.pos_info_);
  }
  ::memcpy(&_impl_.session_id_, &from._impl_.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_time_) -
    reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.login_time_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_LOGIN_RESULT)
}

inline void S2C_LOGIN_RESULT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.session_id_){0}
    , decltype(_impl_.result_){false}
    , decltype(_impl_.time_stamp_){int64_t{0}}
    , decltype(_impl_.login_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_LOGIN_RESULT::~S2C_LOGIN_RESULT() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_LOGIN_RESULT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_LOGIN_RESULT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
}

void S2C_LOGIN_RESULT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_LOGIN_RESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_LOGIN_RESULT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  ::memset(&_impl_.session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.login_time_) -
      reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.login_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_LOGIN_RESULT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 login_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.login_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PLAYER_POS_INFO pos_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_LOGIN_RESULT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_LOGIN_RESULT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_session_id(), target);
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  // int64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_stamp(), target);
  }

  // int32 login_time = 4;
  if (this->_internal_login_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_login_time(), target);
  }

  // .Protocol.PLAYER_POS_INFO pos_info = 5;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_LOGIN_RESULT)
  return target;
}

size_t S2C_LOGIN_RESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_LOGIN_RESULT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PLAYER_POS_INFO pos_info = 5;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // int64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_stamp());
  }

  // int32 login_time = 4;
  if (this->_internal_login_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_login_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_LOGIN_RESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_LOGIN_RESULT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_LOGIN_RESULT::GetClassData() const { return &_class_data_; }


void S2C_LOGIN_RESULT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_LOGIN_RESULT*>(&to_msg);
  auto& from = static_cast<const S2C_LOGIN_RESULT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_LOGIN_RESULT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PLAYER_POS_INFO::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from._internal_login_time() != 0) {
    _this->_internal_set_login_time(from._internal_login_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_LOGIN_RESULT::CopyFrom(const S2C_LOGIN_RESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_LOGIN_RESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LOGIN_RESULT::IsInitialized() const {
  return true;
}

void S2C_LOGIN_RESULT::InternalSwap(S2C_LOGIN_RESULT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_LOGIN_RESULT, _impl_.login_time_)
      + sizeof(S2C_LOGIN_RESULT::_impl_.login_time_)
      - PROTOBUF_FIELD_OFFSET(S2C_LOGIN_RESULT, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LOGIN_RESULT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class C2S_LOGIN_ADMIN::_Internal {
 public:
};

C2S_LOGIN_ADMIN::C2S_LOGIN_ADMIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_LOGIN_ADMIN)
}
C2S_LOGIN_ADMIN::C2S_LOGIN_ADMIN(const C2S_LOGIN_ADMIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_LOGIN_ADMIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.admin_id_){}
    , decltype(_impl_.admin_pw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.admin_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.admin_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin_id().empty()) {
    _this->_impl_.admin_id_.Set(from._internal_admin_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.admin_pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.admin_pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin_pw().empty()) {
    _this->_impl_.admin_pw_.Set(from._internal_admin_pw(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_LOGIN_ADMIN)
}

inline void C2S_LOGIN_ADMIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.admin_id_){}
    , decltype(_impl_.admin_pw_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.admin_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.admin_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.admin_pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C2S_LOGIN_ADMIN::~C2S_LOGIN_ADMIN() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_LOGIN_ADMIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_LOGIN_ADMIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.admin_id_.Destroy();
  _impl_.admin_pw_.Destroy();
}

void C2S_LOGIN_ADMIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_LOGIN_ADMIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_LOGIN_ADMIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.admin_id_.ClearToEmpty();
  _impl_.admin_pw_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_LOGIN_ADMIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string admin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_admin_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C2S_LOGIN_ADMIN.admin_id"));
        } else
          goto handle_unusual;
        continue;
      // string admin_pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_admin_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C2S_LOGIN_ADMIN.admin_pw"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_LOGIN_ADMIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_LOGIN_ADMIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string admin_id = 1;
  if (!this->_internal_admin_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_admin_id().data(), static_cast<int>(this->_internal_admin_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_LOGIN_ADMIN.admin_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_admin_id(), target);
  }

  // string admin_pw = 2;
  if (!this->_internal_admin_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_admin_pw().data(), static_cast<int>(this->_internal_admin_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C2S_LOGIN_ADMIN.admin_pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_admin_pw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_LOGIN_ADMIN)
  return target;
}

size_t C2S_LOGIN_ADMIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_LOGIN_ADMIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string admin_id = 1;
  if (!this->_internal_admin_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_admin_id());
  }

  // string admin_pw = 2;
  if (!this->_internal_admin_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_admin_pw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_LOGIN_ADMIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_LOGIN_ADMIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_LOGIN_ADMIN::GetClassData() const { return &_class_data_; }


void C2S_LOGIN_ADMIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_LOGIN_ADMIN*>(&to_msg);
  auto& from = static_cast<const C2S_LOGIN_ADMIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_LOGIN_ADMIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_admin_id().empty()) {
    _this->_internal_set_admin_id(from._internal_admin_id());
  }
  if (!from._internal_admin_pw().empty()) {
    _this->_internal_set_admin_pw(from._internal_admin_pw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_LOGIN_ADMIN::CopyFrom(const C2S_LOGIN_ADMIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_LOGIN_ADMIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LOGIN_ADMIN::IsInitialized() const {
  return true;
}

void C2S_LOGIN_ADMIN::InternalSwap(C2S_LOGIN_ADMIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.admin_id_, lhs_arena,
      &other->_impl_.admin_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.admin_pw_, lhs_arena,
      &other->_impl_.admin_pw_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LOGIN_ADMIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S2C_LOGIN_ADMIN_RESULT::_Internal {
 public:
};

S2C_LOGIN_ADMIN_RESULT::S2C_LOGIN_ADMIN_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_LOGIN_ADMIN_RESULT)
}
S2C_LOGIN_ADMIN_RESULT::S2C_LOGIN_ADMIN_RESULT(const S2C_LOGIN_ADMIN_RESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_LOGIN_ADMIN_RESULT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.session_id_, &from._impl_.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_LOGIN_ADMIN_RESULT)
}

inline void S2C_LOGIN_ADMIN_RESULT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){0}
    , decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_LOGIN_ADMIN_RESULT::~S2C_LOGIN_ADMIN_RESULT() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_LOGIN_ADMIN_RESULT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_LOGIN_ADMIN_RESULT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_LOGIN_ADMIN_RESULT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_LOGIN_ADMIN_RESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_LOGIN_ADMIN_RESULT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_LOGIN_ADMIN_RESULT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_LOGIN_ADMIN_RESULT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_LOGIN_ADMIN_RESULT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_session_id(), target);
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_LOGIN_ADMIN_RESULT)
  return target;
}

size_t S2C_LOGIN_ADMIN_RESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_LOGIN_ADMIN_RESULT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());
  }

  // bool result = 2;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_LOGIN_ADMIN_RESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_LOGIN_ADMIN_RESULT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_LOGIN_ADMIN_RESULT::GetClassData() const { return &_class_data_; }


void S2C_LOGIN_ADMIN_RESULT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_LOGIN_ADMIN_RESULT*>(&to_msg);
  auto& from = static_cast<const S2C_LOGIN_ADMIN_RESULT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_LOGIN_ADMIN_RESULT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_LOGIN_ADMIN_RESULT::CopyFrom(const S2C_LOGIN_ADMIN_RESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_LOGIN_ADMIN_RESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LOGIN_ADMIN_RESULT::IsInitialized() const {
  return true;
}

void S2C_LOGIN_ADMIN_RESULT::InternalSwap(S2C_LOGIN_ADMIN_RESULT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_LOGIN_ADMIN_RESULT, _impl_.result_)
      + sizeof(S2C_LOGIN_ADMIN_RESULT::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(S2C_LOGIN_ADMIN_RESULT, _impl_.session_id_)>(
          reinterpret_cast<char*>(&_impl_.session_id_),
          reinterpret_cast<char*>(&other->_impl_.session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LOGIN_ADMIN_RESULT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class C2S_MOVE::_Internal {
 public:
  static const ::Protocol::PLAYER_POS_INFO& pos_info(const C2S_MOVE* msg);
};

const ::Protocol::PLAYER_POS_INFO&
C2S_MOVE::_Internal::pos_info(const C2S_MOVE* msg) {
  return *msg->_impl_.pos_info_;
}
C2S_MOVE::C2S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_MOVE)
}
C2S_MOVE::C2S_MOVE(const C2S_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.request_result_){}
    , decltype(_impl_.time_stamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PLAYER_POS_INFO(*from._impl_.pos_info_);
  }
  ::memcpy(&_impl_.session_id_, &from._impl_.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_stamp_) -
    reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.time_stamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_MOVE)
}

inline void C2S_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.session_id_){0}
    , decltype(_impl_.request_result_){false}
    , decltype(_impl_.time_stamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_MOVE::~C2S_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
}

void C2S_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  ::memset(&_impl_.session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_stamp_) -
      reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.time_stamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PLAYER_POS_INFO pos_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool request_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.request_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_session_id(), target);
  }

  // .Protocol.PLAYER_POS_INFO pos_info = 2;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  // int64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_stamp(), target);
  }

  // bool request_result = 4;
  if (this->_internal_request_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_request_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_MOVE)
  return target;
}

size_t C2S_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PLAYER_POS_INFO pos_info = 2;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());
  }

  // bool request_result = 4;
  if (this->_internal_request_result() != 0) {
    total_size += 1 + 1;
  }

  // int64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_stamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_MOVE::GetClassData() const { return &_class_data_; }


void C2S_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_MOVE*>(&to_msg);
  auto& from = static_cast<const C2S_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PLAYER_POS_INFO::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_request_result() != 0) {
    _this->_internal_set_request_result(from._internal_request_result());
  }
  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_MOVE::CopyFrom(const C2S_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_MOVE::IsInitialized() const {
  return true;
}

void C2S_MOVE::InternalSwap(C2S_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_MOVE, _impl_.time_stamp_)
      + sizeof(C2S_MOVE::_impl_.time_stamp_)
      - PROTOBUF_FIELD_OFFSET(C2S_MOVE, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S2C_MOVE_RESULT::_Internal {
 public:
};

S2C_MOVE_RESULT::S2C_MOVE_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_MOVE_RESULT)
}
S2C_MOVE_RESULT::S2C_MOVE_RESULT(const S2C_MOVE_RESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_MOVE_RESULT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_stamp_){}
    , decltype(_impl_.process_time_){}
    , decltype(_impl_.send_time_){}
    , decltype(_impl_.recv_time_){}
    , decltype(_impl_.session_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_stamp_, &from._impl_.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.session_id_) -
    reinterpret_cast<char*>(&_impl_.time_stamp_)) + sizeof(_impl_.session_id_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_MOVE_RESULT)
}

inline void S2C_MOVE_RESULT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_stamp_){int64_t{0}}
    , decltype(_impl_.process_time_){int64_t{0}}
    , decltype(_impl_.send_time_){int64_t{0}}
    , decltype(_impl_.recv_time_){int64_t{0}}
    , decltype(_impl_.session_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_MOVE_RESULT::~S2C_MOVE_RESULT() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_MOVE_RESULT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_MOVE_RESULT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_MOVE_RESULT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_MOVE_RESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_MOVE_RESULT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.session_id_) -
      reinterpret_cast<char*>(&_impl_.time_stamp_)) + sizeof(_impl_.session_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_MOVE_RESULT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 process_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.process_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 send_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 recv_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.recv_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_MOVE_RESULT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_MOVE_RESULT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_session_id(), target);
  }

  // int64 time_stamp = 2;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_stamp(), target);
  }

  // int64 process_time = 3;
  if (this->_internal_process_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_process_time(), target);
  }

  // int64 send_time = 4;
  if (this->_internal_send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_send_time(), target);
  }

  // int64 recv_time = 5;
  if (this->_internal_recv_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_recv_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_MOVE_RESULT)
  return target;
}

size_t S2C_MOVE_RESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_MOVE_RESULT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time_stamp = 2;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_stamp());
  }

  // int64 process_time = 3;
  if (this->_internal_process_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_process_time());
  }

  // int64 send_time = 4;
  if (this->_internal_send_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_send_time());
  }

  // int64 recv_time = 5;
  if (this->_internal_recv_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_recv_time());
  }

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_MOVE_RESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_MOVE_RESULT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_MOVE_RESULT::GetClassData() const { return &_class_data_; }


void S2C_MOVE_RESULT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_MOVE_RESULT*>(&to_msg);
  auto& from = static_cast<const S2C_MOVE_RESULT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_MOVE_RESULT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from._internal_process_time() != 0) {
    _this->_internal_set_process_time(from._internal_process_time());
  }
  if (from._internal_send_time() != 0) {
    _this->_internal_set_send_time(from._internal_send_time());
  }
  if (from._internal_recv_time() != 0) {
    _this->_internal_set_recv_time(from._internal_recv_time());
  }
  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_MOVE_RESULT::CopyFrom(const S2C_MOVE_RESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_MOVE_RESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_MOVE_RESULT::IsInitialized() const {
  return true;
}

void S2C_MOVE_RESULT::InternalSwap(S2C_MOVE_RESULT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_MOVE_RESULT, _impl_.session_id_)
      + sizeof(S2C_MOVE_RESULT::_impl_.session_id_)
      - PROTOBUF_FIELD_OFFSET(S2C_MOVE_RESULT, _impl_.time_stamp_)>(
          reinterpret_cast<char*>(&_impl_.time_stamp_),
          reinterpret_cast<char*>(&other->_impl_.time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_MOVE_RESULT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S2C_MOVE::_Internal {
 public:
  static const ::Protocol::PLAYER_POS_INFO& pos_info(const S2C_MOVE* msg);
};

const ::Protocol::PLAYER_POS_INFO&
S2C_MOVE::_Internal::pos_info(const S2C_MOVE* msg) {
  return *msg->_impl_.pos_info_;
}
S2C_MOVE::S2C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_MOVE)
}
S2C_MOVE::S2C_MOVE(const S2C_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.time_stamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PLAYER_POS_INFO(*from._impl_.pos_info_);
  }
  ::memcpy(&_impl_.session_id_, &from._impl_.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_stamp_) -
    reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.time_stamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_MOVE)
}

inline void S2C_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.session_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.time_stamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_MOVE::~S2C_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
}

void S2C_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  ::memset(&_impl_.session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_stamp_) -
      reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.time_stamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PLAYER_POS_INFO pos_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_session_id(), target);
  }

  // int32 target_id = 2;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_id(), target);
  }

  // int64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_stamp(), target);
  }

  // .Protocol.PLAYER_POS_INFO pos_info = 4;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_MOVE)
  return target;
}

size_t S2C_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PLAYER_POS_INFO pos_info = 4;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());
  }

  // int32 target_id = 2;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_stamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_MOVE::GetClassData() const { return &_class_data_; }


void S2C_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_MOVE*>(&to_msg);
  auto& from = static_cast<const S2C_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PLAYER_POS_INFO::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_MOVE::CopyFrom(const S2C_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_MOVE::IsInitialized() const {
  return true;
}

void S2C_MOVE::InternalSwap(S2C_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_MOVE, _impl_.time_stamp_)
      + sizeof(S2C_MOVE::_impl_.time_stamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_MOVE, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S2C_ENTER::_Internal {
 public:
  static const ::Protocol::PLAYER_POS_INFO& pos_info(const S2C_ENTER* msg);
};

const ::Protocol::PLAYER_POS_INFO&
S2C_ENTER::_Internal::pos_info(const S2C_ENTER* msg) {
  return *msg->_impl_.pos_info_;
}
S2C_ENTER::S2C_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_ENTER)
}
S2C_ENTER::S2C_ENTER(const S2C_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_ENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.time_stamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PLAYER_POS_INFO(*from._impl_.pos_info_);
  }
  ::memcpy(&_impl_.session_id_, &from._impl_.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_stamp_) -
    reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.time_stamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_ENTER)
}

inline void S2C_ENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.session_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.time_stamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_ENTER::~S2C_ENTER() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_ENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
}

void S2C_ENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  ::memset(&_impl_.session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_stamp_) -
      reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.time_stamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_ENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PLAYER_POS_INFO pos_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_session_id(), target);
  }

  // int32 target_id = 2;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_id(), target);
  }

  // int64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_stamp(), target);
  }

  // .Protocol.PLAYER_POS_INFO pos_info = 4;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_ENTER)
  return target;
}

size_t S2C_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PLAYER_POS_INFO pos_info = 4;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());
  }

  // int32 target_id = 2;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int64 time_stamp = 3;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_stamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_ENTER::GetClassData() const { return &_class_data_; }


void S2C_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_ENTER*>(&to_msg);
  auto& from = static_cast<const S2C_ENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_ENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PLAYER_POS_INFO::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_time_stamp() != 0) {
    _this->_internal_set_time_stamp(from._internal_time_stamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_ENTER::CopyFrom(const S2C_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_ENTER::IsInitialized() const {
  return true;
}

void S2C_ENTER::InternalSwap(S2C_ENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_ENTER, _impl_.time_stamp_)
      + sizeof(S2C_ENTER::_impl_.time_stamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_ENTER, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_ENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class S2C_LEAVE::_Internal {
 public:
};

S2C_LEAVE::S2C_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_LEAVE)
}
S2C_LEAVE::S2C_LEAVE(const S2C_LEAVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_LEAVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.target_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.session_id_, &from._impl_.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_id_) -
    reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.target_id_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_LEAVE)
}

inline void S2C_LEAVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){0}
    , decltype(_impl_.target_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_LEAVE::~S2C_LEAVE() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_LEAVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_LEAVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_LEAVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_LEAVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_LEAVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_id_) -
      reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.target_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_LEAVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_LEAVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_LEAVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_session_id(), target);
  }

  // int32 target_id = 2;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_LEAVE)
  return target;
}

size_t S2C_LEAVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_LEAVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());
  }

  // int32 target_id = 2;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_LEAVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_LEAVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_LEAVE::GetClassData() const { return &_class_data_; }


void S2C_LEAVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_LEAVE*>(&to_msg);
  auto& from = static_cast<const S2C_LEAVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_LEAVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_LEAVE::CopyFrom(const S2C_LEAVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_LEAVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LEAVE::IsInitialized() const {
  return true;
}

void S2C_LEAVE::InternalSwap(S2C_LEAVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_LEAVE, _impl_.target_id_)
      + sizeof(S2C_LEAVE::_impl_.target_id_)
      - PROTOBUF_FIELD_OFFSET(S2C_LEAVE, _impl_.session_id_)>(
          reinterpret_cast<char*>(&_impl_.session_id_),
          reinterpret_cast<char*>(&other->_impl_.session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LEAVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::PLAYER_POS_INFO*
Arena::CreateMaybeMessage< ::Protocol::PLAYER_POS_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PLAYER_POS_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C2S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_LOGIN_RESULT*
Arena::CreateMaybeMessage< ::Protocol::S2C_LOGIN_RESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_LOGIN_RESULT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_LOGIN_ADMIN*
Arena::CreateMaybeMessage< ::Protocol::C2S_LOGIN_ADMIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_LOGIN_ADMIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_LOGIN_ADMIN_RESULT*
Arena::CreateMaybeMessage< ::Protocol::S2C_LOGIN_ADMIN_RESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_LOGIN_ADMIN_RESULT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_MOVE*
Arena::CreateMaybeMessage< ::Protocol::C2S_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_MOVE_RESULT*
Arena::CreateMaybeMessage< ::Protocol::S2C_MOVE_RESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_MOVE_RESULT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_MOVE*
Arena::CreateMaybeMessage< ::Protocol::S2C_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_ENTER*
Arena::CreateMaybeMessage< ::Protocol::S2C_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_LEAVE*
Arena::CreateMaybeMessage< ::Protocol::S2C_LEAVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_LEAVE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
